
Embedded_serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001818  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800200  00800200  0000188c  2**0
                  ALLOC
  2 .stab         00001650  00000000  00000000  0000188c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000057e  00000000  00000000  00002edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00003460  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a19  00000000  00000000  000034e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d3  00000000  00000000  00003ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000058d  00000000  00000000  000040cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b8  00000000  00000000  0000465c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000175  00000000  00000000  00004814  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000036d  00000000  00000000  00004989  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__vector_51>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e1       	ldi	r30, 0x18	; 24
      fc:	f8 e1       	ldi	r31, 0x18	; 24
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 30       	cpi	r26, 0x00	; 0
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a1 30       	cpi	r26, 0x01	; 1
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <main>
     122:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_port_config>:
unsigned char data; //to store received data from UDR1


//Function to configure LCD port
void lcd_port_config (void)
{
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     132:	87 e2       	ldi	r24, 0x27	; 39
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	27 e2       	ldi	r18, 0x27	; 39
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	f9 01       	movw	r30, r18
     13c:	20 81       	ld	r18, Z
     13e:	27 6f       	ori	r18, 0xF7	; 247
     140:	fc 01       	movw	r30, r24
     142:	20 83       	st	Z, r18
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     144:	88 e2       	ldi	r24, 0x28	; 40
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	28 e2       	ldi	r18, 0x28	; 40
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	f9 01       	movw	r30, r18
     14e:	20 81       	ld	r18, Z
     150:	20 78       	andi	r18, 0x80	; 128
     152:	fc 01       	movw	r30, r24
     154:	20 83       	st	Z, r18
}
     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	08 95       	ret

0000015c <port_init>:

//Function to initialize ports
void port_init()
{
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	cd b7       	in	r28, 0x3d	; 61
     162:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
     164:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_port_config>
}
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	08 95       	ret

0000016e <lcd_set_4bit>:

/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	c0 57       	subi	r28, 0x70	; 112
     17c:	d0 40       	sbci	r29, 0x00	; 0
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	f8 94       	cli
     182:	de bf       	out	0x3e, r29	; 62
     184:	0f be       	out	0x3f, r0	; 63
     186:	cd bf       	out	0x3d, r28	; 61
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	a0 e8       	ldi	r26, 0x80	; 128
     18e:	bf e3       	ldi	r27, 0x3F	; 63
     190:	89 83       	std	Y+1, r24	; 0x01
     192:	9a 83       	std	Y+2, r25	; 0x02
     194:	ab 83       	std	Y+3, r26	; 0x03
     196:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     198:	69 81       	ldd	r22, Y+1	; 0x01
     19a:	7a 81       	ldd	r23, Y+2	; 0x02
     19c:	8b 81       	ldd	r24, Y+3	; 0x03
     19e:	9c 81       	ldd	r25, Y+4	; 0x04
     1a0:	26 e6       	ldi	r18, 0x66	; 102
     1a2:	36 e6       	ldi	r19, 0x66	; 102
     1a4:	46 e6       	ldi	r20, 0x66	; 102
     1a6:	55 e4       	ldi	r21, 0x45	; 69
     1a8:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     1ac:	dc 01       	movw	r26, r24
     1ae:	cb 01       	movw	r24, r22
     1b0:	8d 83       	std	Y+5, r24	; 0x05
     1b2:	9e 83       	std	Y+6, r25	; 0x06
     1b4:	af 83       	std	Y+7, r26	; 0x07
     1b6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     1b8:	11 e0       	ldi	r17, 0x01	; 1
     1ba:	6d 81       	ldd	r22, Y+5	; 0x05
     1bc:	7e 81       	ldd	r23, Y+6	; 0x06
     1be:	8f 81       	ldd	r24, Y+7	; 0x07
     1c0:	98 85       	ldd	r25, Y+8	; 0x08
     1c2:	20 e0       	ldi	r18, 0x00	; 0
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	40 e8       	ldi	r20, 0x80	; 128
     1c8:	5f e3       	ldi	r21, 0x3F	; 63
     1ca:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__cmpsf2>
     1ce:	88 23       	and	r24, r24
     1d0:	0c f0       	brlt	.+2      	; 0x1d4 <lcd_set_4bit+0x66>
     1d2:	10 e0       	ldi	r17, 0x00	; 0
     1d4:	11 23       	and	r17, r17
     1d6:	29 f0       	breq	.+10     	; 0x1e2 <lcd_set_4bit+0x74>
		__ticks = 1;
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	9a 87       	std	Y+10, r25	; 0x0a
     1de:	89 87       	std	Y+9, r24	; 0x09
     1e0:	46 c0       	rjmp	.+140    	; 0x26e <lcd_set_4bit+0x100>
	else if (__tmp > 65535)
     1e2:	11 e0       	ldi	r17, 0x01	; 1
     1e4:	6d 81       	ldd	r22, Y+5	; 0x05
     1e6:	7e 81       	ldd	r23, Y+6	; 0x06
     1e8:	8f 81       	ldd	r24, Y+7	; 0x07
     1ea:	98 85       	ldd	r25, Y+8	; 0x08
     1ec:	20 e0       	ldi	r18, 0x00	; 0
     1ee:	3f ef       	ldi	r19, 0xFF	; 255
     1f0:	4f e7       	ldi	r20, 0x7F	; 127
     1f2:	57 e4       	ldi	r21, 0x47	; 71
     1f4:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__gesf2>
     1f8:	18 16       	cp	r1, r24
     1fa:	0c f0       	brlt	.+2      	; 0x1fe <lcd_set_4bit+0x90>
     1fc:	10 e0       	ldi	r17, 0x00	; 0
     1fe:	11 23       	and	r17, r17
     200:	61 f1       	breq	.+88     	; 0x25a <lcd_set_4bit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     202:	69 81       	ldd	r22, Y+1	; 0x01
     204:	7a 81       	ldd	r23, Y+2	; 0x02
     206:	8b 81       	ldd	r24, Y+3	; 0x03
     208:	9c 81       	ldd	r25, Y+4	; 0x04
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	40 e2       	ldi	r20, 0x20	; 32
     210:	51 e4       	ldi	r21, 0x41	; 65
     212:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     216:	dc 01       	movw	r26, r24
     218:	cb 01       	movw	r24, r22
     21a:	bc 01       	movw	r22, r24
     21c:	cd 01       	movw	r24, r26
     21e:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
     222:	dc 01       	movw	r26, r24
     224:	cb 01       	movw	r24, r22
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	12 c0       	rjmp	.+36     	; 0x250 <lcd_set_4bit+0xe2>
     22c:	80 e7       	ldi	r24, 0x70	; 112
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	9c 87       	std	Y+12, r25	; 0x0c
     232:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     234:	8b 85       	ldd	r24, Y+11	; 0x0b
     236:	9c 85       	ldd	r25, Y+12	; 0x0c
     238:	8c 01       	movw	r16, r24
     23a:	c8 01       	movw	r24, r16
     23c:	01 97       	sbiw	r24, 0x01	; 1
     23e:	f1 f7       	brne	.-4      	; 0x23c <lcd_set_4bit+0xce>
     240:	8c 01       	movw	r16, r24
     242:	1c 87       	std	Y+12, r17	; 0x0c
     244:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     246:	89 85       	ldd	r24, Y+9	; 0x09
     248:	9a 85       	ldd	r25, Y+10	; 0x0a
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	9a 87       	std	Y+10, r25	; 0x0a
     24e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     250:	89 85       	ldd	r24, Y+9	; 0x09
     252:	9a 85       	ldd	r25, Y+10	; 0x0a
     254:	00 97       	sbiw	r24, 0x00	; 0
     256:	51 f7       	brne	.-44     	; 0x22c <lcd_set_4bit+0xbe>
     258:	17 c0       	rjmp	.+46     	; 0x288 <lcd_set_4bit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     25a:	6d 81       	ldd	r22, Y+5	; 0x05
     25c:	7e 81       	ldd	r23, Y+6	; 0x06
     25e:	8f 81       	ldd	r24, Y+7	; 0x07
     260:	98 85       	ldd	r25, Y+8	; 0x08
     262:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
     266:	dc 01       	movw	r26, r24
     268:	cb 01       	movw	r24, r22
     26a:	9a 87       	std	Y+10, r25	; 0x0a
     26c:	89 87       	std	Y+9, r24	; 0x09
     26e:	89 85       	ldd	r24, Y+9	; 0x09
     270:	9a 85       	ldd	r25, Y+10	; 0x0a
     272:	9e 87       	std	Y+14, r25	; 0x0e
     274:	8d 87       	std	Y+13, r24	; 0x0d
     276:	8d 85       	ldd	r24, Y+13	; 0x0d
     278:	9e 85       	ldd	r25, Y+14	; 0x0e
     27a:	8c 01       	movw	r16, r24
     27c:	f8 01       	movw	r30, r16
     27e:	31 97       	sbiw	r30, 0x01	; 1
     280:	f1 f7       	brne	.-4      	; 0x27e <lcd_set_4bit+0x110>
     282:	8f 01       	movw	r16, r30
     284:	1e 87       	std	Y+14, r17	; 0x0e
     286:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     288:	88 e2       	ldi	r24, 0x28	; 40
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	28 e2       	ldi	r18, 0x28	; 40
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	f9 01       	movw	r30, r18
     292:	20 81       	ld	r18, Z
     294:	2e 7f       	andi	r18, 0xFE	; 254
     296:	fc 01       	movw	r30, r24
     298:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     29a:	88 e2       	ldi	r24, 0x28	; 40
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	28 e2       	ldi	r18, 0x28	; 40
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	f9 01       	movw	r30, r18
     2a4:	20 81       	ld	r18, Z
     2a6:	2d 7f       	andi	r18, 0xFD	; 253
     2a8:	fc 01       	movw	r30, r24
     2aa:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
     2ac:	88 e2       	ldi	r24, 0x28	; 40
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	20 e3       	ldi	r18, 0x30	; 48
     2b2:	fc 01       	movw	r30, r24
     2b4:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     2b6:	88 e2       	ldi	r24, 0x28	; 40
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	28 e2       	ldi	r18, 0x28	; 40
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	f9 01       	movw	r30, r18
     2c0:	20 81       	ld	r18, Z
     2c2:	24 60       	ori	r18, 0x04	; 4
     2c4:	fc 01       	movw	r30, r24
     2c6:	20 83       	st	Z, r18
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	a0 ea       	ldi	r26, 0xA0	; 160
     2ce:	b0 e4       	ldi	r27, 0x40	; 64
     2d0:	8f 87       	std	Y+15, r24	; 0x0f
     2d2:	98 8b       	std	Y+16, r25	; 0x10
     2d4:	a9 8b       	std	Y+17, r26	; 0x11
     2d6:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     2d8:	6f 85       	ldd	r22, Y+15	; 0x0f
     2da:	78 89       	ldd	r23, Y+16	; 0x10
     2dc:	89 89       	ldd	r24, Y+17	; 0x11
     2de:	9a 89       	ldd	r25, Y+18	; 0x12
     2e0:	26 e6       	ldi	r18, 0x66	; 102
     2e2:	36 e6       	ldi	r19, 0x66	; 102
     2e4:	46 e6       	ldi	r20, 0x66	; 102
     2e6:	55 e4       	ldi	r21, 0x45	; 69
     2e8:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     2ec:	dc 01       	movw	r26, r24
     2ee:	cb 01       	movw	r24, r22
     2f0:	8b 8b       	std	Y+19, r24	; 0x13
     2f2:	9c 8b       	std	Y+20, r25	; 0x14
     2f4:	ad 8b       	std	Y+21, r26	; 0x15
     2f6:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     2f8:	11 e0       	ldi	r17, 0x01	; 1
     2fa:	6b 89       	ldd	r22, Y+19	; 0x13
     2fc:	7c 89       	ldd	r23, Y+20	; 0x14
     2fe:	8d 89       	ldd	r24, Y+21	; 0x15
     300:	9e 89       	ldd	r25, Y+22	; 0x16
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	40 e8       	ldi	r20, 0x80	; 128
     308:	5f e3       	ldi	r21, 0x3F	; 63
     30a:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__cmpsf2>
     30e:	88 23       	and	r24, r24
     310:	0c f0       	brlt	.+2      	; 0x314 <lcd_set_4bit+0x1a6>
     312:	10 e0       	ldi	r17, 0x00	; 0
     314:	11 23       	and	r17, r17
     316:	29 f0       	breq	.+10     	; 0x322 <lcd_set_4bit+0x1b4>
		__ticks = 1;
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	98 8f       	std	Y+24, r25	; 0x18
     31e:	8f 8b       	std	Y+23, r24	; 0x17
     320:	46 c0       	rjmp	.+140    	; 0x3ae <lcd_set_4bit+0x240>
	else if (__tmp > 65535)
     322:	11 e0       	ldi	r17, 0x01	; 1
     324:	6b 89       	ldd	r22, Y+19	; 0x13
     326:	7c 89       	ldd	r23, Y+20	; 0x14
     328:	8d 89       	ldd	r24, Y+21	; 0x15
     32a:	9e 89       	ldd	r25, Y+22	; 0x16
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	3f ef       	ldi	r19, 0xFF	; 255
     330:	4f e7       	ldi	r20, 0x7F	; 127
     332:	57 e4       	ldi	r21, 0x47	; 71
     334:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__gesf2>
     338:	18 16       	cp	r1, r24
     33a:	0c f0       	brlt	.+2      	; 0x33e <lcd_set_4bit+0x1d0>
     33c:	10 e0       	ldi	r17, 0x00	; 0
     33e:	11 23       	and	r17, r17
     340:	61 f1       	breq	.+88     	; 0x39a <lcd_set_4bit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     342:	6f 85       	ldd	r22, Y+15	; 0x0f
     344:	78 89       	ldd	r23, Y+16	; 0x10
     346:	89 89       	ldd	r24, Y+17	; 0x11
     348:	9a 89       	ldd	r25, Y+18	; 0x12
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e2       	ldi	r20, 0x20	; 32
     350:	51 e4       	ldi	r21, 0x41	; 65
     352:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     356:	dc 01       	movw	r26, r24
     358:	cb 01       	movw	r24, r22
     35a:	bc 01       	movw	r22, r24
     35c:	cd 01       	movw	r24, r26
     35e:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
     362:	dc 01       	movw	r26, r24
     364:	cb 01       	movw	r24, r22
     366:	98 8f       	std	Y+24, r25	; 0x18
     368:	8f 8b       	std	Y+23, r24	; 0x17
     36a:	12 c0       	rjmp	.+36     	; 0x390 <lcd_set_4bit+0x222>
     36c:	80 e7       	ldi	r24, 0x70	; 112
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	9a 8f       	std	Y+26, r25	; 0x1a
     372:	89 8f       	std	Y+25, r24	; 0x19
     374:	89 8d       	ldd	r24, Y+25	; 0x19
     376:	9a 8d       	ldd	r25, Y+26	; 0x1a
     378:	8c 01       	movw	r16, r24
     37a:	c8 01       	movw	r24, r16
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <lcd_set_4bit+0x20e>
     380:	8c 01       	movw	r16, r24
     382:	1a 8f       	std	Y+26, r17	; 0x1a
     384:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     386:	8f 89       	ldd	r24, Y+23	; 0x17
     388:	98 8d       	ldd	r25, Y+24	; 0x18
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	98 8f       	std	Y+24, r25	; 0x18
     38e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     390:	8f 89       	ldd	r24, Y+23	; 0x17
     392:	98 8d       	ldd	r25, Y+24	; 0x18
     394:	00 97       	sbiw	r24, 0x00	; 0
     396:	51 f7       	brne	.-44     	; 0x36c <lcd_set_4bit+0x1fe>
     398:	17 c0       	rjmp	.+46     	; 0x3c8 <lcd_set_4bit+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     39a:	6b 89       	ldd	r22, Y+19	; 0x13
     39c:	7c 89       	ldd	r23, Y+20	; 0x14
     39e:	8d 89       	ldd	r24, Y+21	; 0x15
     3a0:	9e 89       	ldd	r25, Y+22	; 0x16
     3a2:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
     3a6:	dc 01       	movw	r26, r24
     3a8:	cb 01       	movw	r24, r22
     3aa:	98 8f       	std	Y+24, r25	; 0x18
     3ac:	8f 8b       	std	Y+23, r24	; 0x17
     3ae:	8f 89       	ldd	r24, Y+23	; 0x17
     3b0:	98 8d       	ldd	r25, Y+24	; 0x18
     3b2:	9c 8f       	std	Y+28, r25	; 0x1c
     3b4:	8b 8f       	std	Y+27, r24	; 0x1b
     3b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3ba:	8c 01       	movw	r16, r24
     3bc:	f8 01       	movw	r30, r16
     3be:	31 97       	sbiw	r30, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_set_4bit+0x250>
     3c2:	8f 01       	movw	r16, r30
     3c4:	1c 8f       	std	Y+28, r17	; 0x1c
     3c6:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     3c8:	88 e2       	ldi	r24, 0x28	; 40
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	28 e2       	ldi	r18, 0x28	; 40
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	f9 01       	movw	r30, r18
     3d2:	20 81       	ld	r18, Z
     3d4:	2b 7f       	andi	r18, 0xFB	; 251
     3d6:	fc 01       	movw	r30, r24
     3d8:	20 83       	st	Z, r18
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	a0 e8       	ldi	r26, 0x80	; 128
     3e0:	bf e3       	ldi	r27, 0x3F	; 63
     3e2:	8d 8f       	std	Y+29, r24	; 0x1d
     3e4:	9e 8f       	std	Y+30, r25	; 0x1e
     3e6:	af 8f       	std	Y+31, r26	; 0x1f
     3e8:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     3ea:	6d 8d       	ldd	r22, Y+29	; 0x1d
     3ec:	7e 8d       	ldd	r23, Y+30	; 0x1e
     3ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3f0:	98 a1       	lds	r25, 0x48
     3f2:	26 e6       	ldi	r18, 0x66	; 102
     3f4:	36 e6       	ldi	r19, 0x66	; 102
     3f6:	46 e6       	ldi	r20, 0x66	; 102
     3f8:	55 e4       	ldi	r21, 0x45	; 69
     3fa:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     3fe:	dc 01       	movw	r26, r24
     400:	cb 01       	movw	r24, r22
     402:	89 a3       	lds	r24, 0x59
     404:	9a a3       	lds	r25, 0x5a
     406:	ab a3       	lds	r26, 0x5b
     408:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
     40a:	11 e0       	ldi	r17, 0x01	; 1
     40c:	69 a1       	lds	r22, 0x49
     40e:	7a a1       	lds	r23, 0x4a
     410:	8b a1       	lds	r24, 0x4b
     412:	9c a1       	lds	r25, 0x4c
     414:	20 e0       	ldi	r18, 0x00	; 0
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	40 e8       	ldi	r20, 0x80	; 128
     41a:	5f e3       	ldi	r21, 0x3F	; 63
     41c:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__cmpsf2>
     420:	88 23       	and	r24, r24
     422:	0c f0       	brlt	.+2      	; 0x426 <lcd_set_4bit+0x2b8>
     424:	10 e0       	ldi	r17, 0x00	; 0
     426:	11 23       	and	r17, r17
     428:	29 f0       	breq	.+10     	; 0x434 <lcd_set_4bit+0x2c6>
		__ticks = 1;
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	9e a3       	lds	r25, 0x5e
     430:	8d a3       	lds	r24, 0x5d
     432:	46 c0       	rjmp	.+140    	; 0x4c0 <lcd_set_4bit+0x352>
	else if (__tmp > 65535)
     434:	11 e0       	ldi	r17, 0x01	; 1
     436:	69 a1       	lds	r22, 0x49
     438:	7a a1       	lds	r23, 0x4a
     43a:	8b a1       	lds	r24, 0x4b
     43c:	9c a1       	lds	r25, 0x4c
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	3f ef       	ldi	r19, 0xFF	; 255
     442:	4f e7       	ldi	r20, 0x7F	; 127
     444:	57 e4       	ldi	r21, 0x47	; 71
     446:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__gesf2>
     44a:	18 16       	cp	r1, r24
     44c:	0c f0       	brlt	.+2      	; 0x450 <lcd_set_4bit+0x2e2>
     44e:	10 e0       	ldi	r17, 0x00	; 0
     450:	11 23       	and	r17, r17
     452:	61 f1       	breq	.+88     	; 0x4ac <lcd_set_4bit+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     454:	6d 8d       	ldd	r22, Y+29	; 0x1d
     456:	7e 8d       	ldd	r23, Y+30	; 0x1e
     458:	8f 8d       	ldd	r24, Y+31	; 0x1f
     45a:	98 a1       	lds	r25, 0x48
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	40 e2       	ldi	r20, 0x20	; 32
     462:	51 e4       	ldi	r21, 0x41	; 65
     464:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     468:	dc 01       	movw	r26, r24
     46a:	cb 01       	movw	r24, r22
     46c:	bc 01       	movw	r22, r24
     46e:	cd 01       	movw	r24, r26
     470:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	9e a3       	lds	r25, 0x5e
     47a:	8d a3       	lds	r24, 0x5d
     47c:	12 c0       	rjmp	.+36     	; 0x4a2 <lcd_set_4bit+0x334>
     47e:	80 e7       	ldi	r24, 0x70	; 112
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	98 a7       	lds	r25, 0x78
     484:	8f a3       	lds	r24, 0x5f
     486:	8f a1       	lds	r24, 0x4f
     488:	98 a5       	lds	r25, 0x68
     48a:	8c 01       	movw	r16, r24
     48c:	c8 01       	movw	r24, r16
     48e:	01 97       	sbiw	r24, 0x01	; 1
     490:	f1 f7       	brne	.-4      	; 0x48e <lcd_set_4bit+0x320>
     492:	8c 01       	movw	r16, r24
     494:	18 a7       	lds	r17, 0x78
     496:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     498:	8d a1       	lds	r24, 0x4d
     49a:	9e a1       	lds	r25, 0x4e
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	9e a3       	lds	r25, 0x5e
     4a0:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4a2:	8d a1       	lds	r24, 0x4d
     4a4:	9e a1       	lds	r25, 0x4e
     4a6:	00 97       	sbiw	r24, 0x00	; 0
     4a8:	51 f7       	brne	.-44     	; 0x47e <lcd_set_4bit+0x310>
     4aa:	17 c0       	rjmp	.+46     	; 0x4da <lcd_set_4bit+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4ac:	69 a1       	lds	r22, 0x49
     4ae:	7a a1       	lds	r23, 0x4a
     4b0:	8b a1       	lds	r24, 0x4b
     4b2:	9c a1       	lds	r25, 0x4c
     4b4:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
     4b8:	dc 01       	movw	r26, r24
     4ba:	cb 01       	movw	r24, r22
     4bc:	9e a3       	lds	r25, 0x5e
     4be:	8d a3       	lds	r24, 0x5d
     4c0:	8d a1       	lds	r24, 0x4d
     4c2:	9e a1       	lds	r25, 0x4e
     4c4:	9a a7       	lds	r25, 0x7a
     4c6:	89 a7       	lds	r24, 0x79
     4c8:	89 a5       	lds	r24, 0x69
     4ca:	9a a5       	lds	r25, 0x6a
     4cc:	8c 01       	movw	r16, r24
     4ce:	f8 01       	movw	r30, r16
     4d0:	31 97       	sbiw	r30, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <lcd_set_4bit+0x362>
     4d4:	8f 01       	movw	r16, r30
     4d6:	1a a7       	lds	r17, 0x7a
     4d8:	09 a7       	lds	r16, 0x79

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     4da:	88 e2       	ldi	r24, 0x28	; 40
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	28 e2       	ldi	r18, 0x28	; 40
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	f9 01       	movw	r30, r18
     4e4:	20 81       	ld	r18, Z
     4e6:	2e 7f       	andi	r18, 0xFE	; 254
     4e8:	fc 01       	movw	r30, r24
     4ea:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     4ec:	88 e2       	ldi	r24, 0x28	; 40
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	28 e2       	ldi	r18, 0x28	; 40
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	f9 01       	movw	r30, r18
     4f6:	20 81       	ld	r18, Z
     4f8:	2d 7f       	andi	r18, 0xFD	; 253
     4fa:	fc 01       	movw	r30, r24
     4fc:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
     4fe:	88 e2       	ldi	r24, 0x28	; 40
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	20 e3       	ldi	r18, 0x30	; 48
     504:	fc 01       	movw	r30, r24
     506:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     508:	88 e2       	ldi	r24, 0x28	; 40
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	28 e2       	ldi	r18, 0x28	; 40
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	f9 01       	movw	r30, r18
     512:	20 81       	ld	r18, Z
     514:	24 60       	ori	r18, 0x04	; 4
     516:	fc 01       	movw	r30, r24
     518:	20 83       	st	Z, r18
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	a0 ea       	ldi	r26, 0xA0	; 160
     520:	b0 e4       	ldi	r27, 0x40	; 64
     522:	8b a7       	lds	r24, 0x7b
     524:	9c a7       	lds	r25, 0x7c
     526:	ad a7       	lds	r26, 0x7d
     528:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     52a:	6b a5       	lds	r22, 0x6b
     52c:	7c a5       	lds	r23, 0x6c
     52e:	8d a5       	lds	r24, 0x6d
     530:	9e a5       	lds	r25, 0x6e
     532:	26 e6       	ldi	r18, 0x66	; 102
     534:	36 e6       	ldi	r19, 0x66	; 102
     536:	46 e6       	ldi	r20, 0x66	; 102
     538:	55 e4       	ldi	r21, 0x45	; 69
     53a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     53e:	dc 01       	movw	r26, r24
     540:	cb 01       	movw	r24, r22
     542:	8f a7       	lds	r24, 0x7f
     544:	98 ab       	sts	0x58, r25
     546:	a9 ab       	sts	0x59, r26
     548:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
     54a:	11 e0       	ldi	r17, 0x01	; 1
     54c:	6f a5       	lds	r22, 0x6f
     54e:	78 a9       	sts	0x48, r23
     550:	89 a9       	sts	0x49, r24
     552:	9a a9       	sts	0x4a, r25
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	40 e8       	ldi	r20, 0x80	; 128
     55a:	5f e3       	ldi	r21, 0x3F	; 63
     55c:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__cmpsf2>
     560:	88 23       	and	r24, r24
     562:	0c f0       	brlt	.+2      	; 0x566 <lcd_set_4bit+0x3f8>
     564:	10 e0       	ldi	r17, 0x00	; 0
     566:	11 23       	and	r17, r17
     568:	29 f0       	breq	.+10     	; 0x574 <lcd_set_4bit+0x406>
		__ticks = 1;
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	9c ab       	sts	0x5c, r25
     570:	8b ab       	sts	0x5b, r24
     572:	46 c0       	rjmp	.+140    	; 0x600 <lcd_set_4bit+0x492>
	else if (__tmp > 65535)
     574:	11 e0       	ldi	r17, 0x01	; 1
     576:	6f a5       	lds	r22, 0x6f
     578:	78 a9       	sts	0x48, r23
     57a:	89 a9       	sts	0x49, r24
     57c:	9a a9       	sts	0x4a, r25
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	3f ef       	ldi	r19, 0xFF	; 255
     582:	4f e7       	ldi	r20, 0x7F	; 127
     584:	57 e4       	ldi	r21, 0x47	; 71
     586:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__gesf2>
     58a:	18 16       	cp	r1, r24
     58c:	0c f0       	brlt	.+2      	; 0x590 <lcd_set_4bit+0x422>
     58e:	10 e0       	ldi	r17, 0x00	; 0
     590:	11 23       	and	r17, r17
     592:	61 f1       	breq	.+88     	; 0x5ec <lcd_set_4bit+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     594:	6b a5       	lds	r22, 0x6b
     596:	7c a5       	lds	r23, 0x6c
     598:	8d a5       	lds	r24, 0x6d
     59a:	9e a5       	lds	r25, 0x6e
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	40 e2       	ldi	r20, 0x20	; 32
     5a2:	51 e4       	ldi	r21, 0x41	; 65
     5a4:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     5a8:	dc 01       	movw	r26, r24
     5aa:	cb 01       	movw	r24, r22
     5ac:	bc 01       	movw	r22, r24
     5ae:	cd 01       	movw	r24, r26
     5b0:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	9c ab       	sts	0x5c, r25
     5ba:	8b ab       	sts	0x5b, r24
     5bc:	12 c0       	rjmp	.+36     	; 0x5e2 <lcd_set_4bit+0x474>
     5be:	80 e7       	ldi	r24, 0x70	; 112
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	9e ab       	sts	0x5e, r25
     5c4:	8d ab       	sts	0x5d, r24
     5c6:	8d a9       	sts	0x4d, r24
     5c8:	9e a9       	sts	0x4e, r25
     5ca:	8c 01       	movw	r16, r24
     5cc:	c8 01       	movw	r24, r16
     5ce:	01 97       	sbiw	r24, 0x01	; 1
     5d0:	f1 f7       	brne	.-4      	; 0x5ce <lcd_set_4bit+0x460>
     5d2:	8c 01       	movw	r16, r24
     5d4:	1e ab       	sts	0x5e, r17
     5d6:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5d8:	8b a9       	sts	0x4b, r24
     5da:	9c a9       	sts	0x4c, r25
     5dc:	01 97       	sbiw	r24, 0x01	; 1
     5de:	9c ab       	sts	0x5c, r25
     5e0:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5e2:	8b a9       	sts	0x4b, r24
     5e4:	9c a9       	sts	0x4c, r25
     5e6:	00 97       	sbiw	r24, 0x00	; 0
     5e8:	51 f7       	brne	.-44     	; 0x5be <lcd_set_4bit+0x450>
     5ea:	17 c0       	rjmp	.+46     	; 0x61a <lcd_set_4bit+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5ec:	6f a5       	lds	r22, 0x6f
     5ee:	78 a9       	sts	0x48, r23
     5f0:	89 a9       	sts	0x49, r24
     5f2:	9a a9       	sts	0x4a, r25
     5f4:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
     5f8:	dc 01       	movw	r26, r24
     5fa:	cb 01       	movw	r24, r22
     5fc:	9c ab       	sts	0x5c, r25
     5fe:	8b ab       	sts	0x5b, r24
     600:	8b a9       	sts	0x4b, r24
     602:	9c a9       	sts	0x4c, r25
     604:	98 af       	sts	0x78, r25
     606:	8f ab       	sts	0x5f, r24
     608:	8f a9       	sts	0x4f, r24
     60a:	98 ad       	sts	0x68, r25
     60c:	8c 01       	movw	r16, r24
     60e:	f8 01       	movw	r30, r16
     610:	31 97       	sbiw	r30, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <lcd_set_4bit+0x4a2>
     614:	8f 01       	movw	r16, r30
     616:	18 af       	sts	0x78, r17
     618:	0f ab       	sts	0x5f, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     61a:	88 e2       	ldi	r24, 0x28	; 40
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	28 e2       	ldi	r18, 0x28	; 40
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	f9 01       	movw	r30, r18
     624:	20 81       	ld	r18, Z
     626:	2b 7f       	andi	r18, 0xFB	; 251
     628:	fc 01       	movw	r30, r24
     62a:	20 83       	st	Z, r18
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	a0 e8       	ldi	r26, 0x80	; 128
     632:	bf e3       	ldi	r27, 0x3F	; 63
     634:	89 af       	sts	0x79, r24
     636:	9a af       	sts	0x7a, r25
     638:	ab af       	sts	0x7b, r26
     63a:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     63c:	69 ad       	sts	0x69, r22
     63e:	7a ad       	sts	0x6a, r23
     640:	8b ad       	sts	0x6b, r24
     642:	9c ad       	sts	0x6c, r25
     644:	26 e6       	ldi	r18, 0x66	; 102
     646:	36 e6       	ldi	r19, 0x66	; 102
     648:	46 e6       	ldi	r20, 0x66	; 102
     64a:	55 e4       	ldi	r21, 0x45	; 69
     64c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     650:	dc 01       	movw	r26, r24
     652:	cb 01       	movw	r24, r22
     654:	9e 01       	movw	r18, r28
     656:	23 5c       	subi	r18, 0xC3	; 195
     658:	3f 4f       	sbci	r19, 0xFF	; 255
     65a:	f9 01       	movw	r30, r18
     65c:	80 83       	st	Z, r24
     65e:	91 83       	std	Z+1, r25	; 0x01
     660:	a2 83       	std	Z+2, r26	; 0x02
     662:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     664:	11 e0       	ldi	r17, 0x01	; 1
     666:	ce 01       	movw	r24, r28
     668:	cd 96       	adiw	r24, 0x3d	; 61
     66a:	fc 01       	movw	r30, r24
     66c:	60 81       	ld	r22, Z
     66e:	71 81       	ldd	r23, Z+1	; 0x01
     670:	82 81       	ldd	r24, Z+2	; 0x02
     672:	93 81       	ldd	r25, Z+3	; 0x03
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 e8       	ldi	r20, 0x80	; 128
     67a:	5f e3       	ldi	r21, 0x3F	; 63
     67c:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__cmpsf2>
     680:	88 23       	and	r24, r24
     682:	0c f0       	brlt	.+2      	; 0x686 <lcd_set_4bit+0x518>
     684:	10 e0       	ldi	r17, 0x00	; 0
     686:	11 23       	and	r17, r17
     688:	49 f0       	breq	.+18     	; 0x69c <lcd_set_4bit+0x52e>
		__ticks = 1;
     68a:	ce 01       	movw	r24, r28
     68c:	8f 5b       	subi	r24, 0xBF	; 191
     68e:	9f 4f       	sbci	r25, 0xFF	; 255
     690:	21 e0       	ldi	r18, 0x01	; 1
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	fc 01       	movw	r30, r24
     696:	31 83       	std	Z+1, r19	; 0x01
     698:	20 83       	st	Z, r18
     69a:	6e c0       	rjmp	.+220    	; 0x778 <lcd_set_4bit+0x60a>
	else if (__tmp > 65535)
     69c:	11 e0       	ldi	r17, 0x01	; 1
     69e:	ce 01       	movw	r24, r28
     6a0:	cd 96       	adiw	r24, 0x3d	; 61
     6a2:	fc 01       	movw	r30, r24
     6a4:	60 81       	ld	r22, Z
     6a6:	71 81       	ldd	r23, Z+1	; 0x01
     6a8:	82 81       	ldd	r24, Z+2	; 0x02
     6aa:	93 81       	ldd	r25, Z+3	; 0x03
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	3f ef       	ldi	r19, 0xFF	; 255
     6b0:	4f e7       	ldi	r20, 0x7F	; 127
     6b2:	57 e4       	ldi	r21, 0x47	; 71
     6b4:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__gesf2>
     6b8:	18 16       	cp	r1, r24
     6ba:	0c f0       	brlt	.+2      	; 0x6be <lcd_set_4bit+0x550>
     6bc:	10 e0       	ldi	r17, 0x00	; 0
     6be:	11 23       	and	r17, r17
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <lcd_set_4bit+0x556>
     6c2:	49 c0       	rjmp	.+146    	; 0x756 <lcd_set_4bit+0x5e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6c4:	69 ad       	sts	0x69, r22
     6c6:	7a ad       	sts	0x6a, r23
     6c8:	8b ad       	sts	0x6b, r24
     6ca:	9c ad       	sts	0x6c, r25
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	40 e2       	ldi	r20, 0x20	; 32
     6d2:	51 e4       	ldi	r21, 0x41	; 65
     6d4:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     6d8:	dc 01       	movw	r26, r24
     6da:	cb 01       	movw	r24, r22
     6dc:	8e 01       	movw	r16, r28
     6de:	0f 5b       	subi	r16, 0xBF	; 191
     6e0:	1f 4f       	sbci	r17, 0xFF	; 255
     6e2:	bc 01       	movw	r22, r24
     6e4:	cd 01       	movw	r24, r26
     6e6:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
     6ea:	dc 01       	movw	r26, r24
     6ec:	cb 01       	movw	r24, r22
     6ee:	f8 01       	movw	r30, r16
     6f0:	91 83       	std	Z+1, r25	; 0x01
     6f2:	80 83       	st	Z, r24
     6f4:	27 c0       	rjmp	.+78     	; 0x744 <lcd_set_4bit+0x5d6>
     6f6:	ce 01       	movw	r24, r28
     6f8:	8d 5b       	subi	r24, 0xBD	; 189
     6fa:	9f 4f       	sbci	r25, 0xFF	; 255
     6fc:	20 e7       	ldi	r18, 0x70	; 112
     6fe:	31 e0       	ldi	r19, 0x01	; 1
     700:	fc 01       	movw	r30, r24
     702:	31 83       	std	Z+1, r19	; 0x01
     704:	20 83       	st	Z, r18
     706:	ce 01       	movw	r24, r28
     708:	8d 5b       	subi	r24, 0xBD	; 189
     70a:	9f 4f       	sbci	r25, 0xFF	; 255
     70c:	fc 01       	movw	r30, r24
     70e:	80 81       	ld	r24, Z
     710:	91 81       	ldd	r25, Z+1	; 0x01
     712:	8c 01       	movw	r16, r24
     714:	c8 01       	movw	r24, r16
     716:	01 97       	sbiw	r24, 0x01	; 1
     718:	f1 f7       	brne	.-4      	; 0x716 <lcd_set_4bit+0x5a8>
     71a:	8c 01       	movw	r16, r24
     71c:	ce 01       	movw	r24, r28
     71e:	8d 5b       	subi	r24, 0xBD	; 189
     720:	9f 4f       	sbci	r25, 0xFF	; 255
     722:	fc 01       	movw	r30, r24
     724:	11 83       	std	Z+1, r17	; 0x01
     726:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     728:	ce 01       	movw	r24, r28
     72a:	8f 5b       	subi	r24, 0xBF	; 191
     72c:	9f 4f       	sbci	r25, 0xFF	; 255
     72e:	9e 01       	movw	r18, r28
     730:	2f 5b       	subi	r18, 0xBF	; 191
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	f9 01       	movw	r30, r18
     736:	20 81       	ld	r18, Z
     738:	31 81       	ldd	r19, Z+1	; 0x01
     73a:	21 50       	subi	r18, 0x01	; 1
     73c:	30 40       	sbci	r19, 0x00	; 0
     73e:	fc 01       	movw	r30, r24
     740:	31 83       	std	Z+1, r19	; 0x01
     742:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     744:	ce 01       	movw	r24, r28
     746:	8f 5b       	subi	r24, 0xBF	; 191
     748:	9f 4f       	sbci	r25, 0xFF	; 255
     74a:	fc 01       	movw	r30, r24
     74c:	80 81       	ld	r24, Z
     74e:	91 81       	ldd	r25, Z+1	; 0x01
     750:	00 97       	sbiw	r24, 0x00	; 0
     752:	89 f6       	brne	.-94     	; 0x6f6 <lcd_set_4bit+0x588>
     754:	2e c0       	rjmp	.+92     	; 0x7b2 <lcd_set_4bit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     756:	8e 01       	movw	r16, r28
     758:	0f 5b       	subi	r16, 0xBF	; 191
     75a:	1f 4f       	sbci	r17, 0xFF	; 255
     75c:	ce 01       	movw	r24, r28
     75e:	cd 96       	adiw	r24, 0x3d	; 61
     760:	fc 01       	movw	r30, r24
     762:	60 81       	ld	r22, Z
     764:	71 81       	ldd	r23, Z+1	; 0x01
     766:	82 81       	ldd	r24, Z+2	; 0x02
     768:	93 81       	ldd	r25, Z+3	; 0x03
     76a:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
     76e:	dc 01       	movw	r26, r24
     770:	cb 01       	movw	r24, r22
     772:	f8 01       	movw	r30, r16
     774:	91 83       	std	Z+1, r25	; 0x01
     776:	80 83       	st	Z, r24
     778:	ce 01       	movw	r24, r28
     77a:	8b 5b       	subi	r24, 0xBB	; 187
     77c:	9f 4f       	sbci	r25, 0xFF	; 255
     77e:	9e 01       	movw	r18, r28
     780:	2f 5b       	subi	r18, 0xBF	; 191
     782:	3f 4f       	sbci	r19, 0xFF	; 255
     784:	f9 01       	movw	r30, r18
     786:	20 81       	ld	r18, Z
     788:	31 81       	ldd	r19, Z+1	; 0x01
     78a:	fc 01       	movw	r30, r24
     78c:	31 83       	std	Z+1, r19	; 0x01
     78e:	20 83       	st	Z, r18
     790:	ce 01       	movw	r24, r28
     792:	8b 5b       	subi	r24, 0xBB	; 187
     794:	9f 4f       	sbci	r25, 0xFF	; 255
     796:	fc 01       	movw	r30, r24
     798:	80 81       	ld	r24, Z
     79a:	91 81       	ldd	r25, Z+1	; 0x01
     79c:	8c 01       	movw	r16, r24
     79e:	c8 01       	movw	r24, r16
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <lcd_set_4bit+0x632>
     7a4:	8c 01       	movw	r16, r24
     7a6:	ce 01       	movw	r24, r28
     7a8:	8b 5b       	subi	r24, 0xBB	; 187
     7aa:	9f 4f       	sbci	r25, 0xFF	; 255
     7ac:	fc 01       	movw	r30, r24
     7ae:	11 83       	std	Z+1, r17	; 0x01
     7b0:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     7b2:	88 e2       	ldi	r24, 0x28	; 40
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	28 e2       	ldi	r18, 0x28	; 40
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	f9 01       	movw	r30, r18
     7bc:	20 81       	ld	r18, Z
     7be:	2e 7f       	andi	r18, 0xFE	; 254
     7c0:	fc 01       	movw	r30, r24
     7c2:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     7c4:	88 e2       	ldi	r24, 0x28	; 40
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	28 e2       	ldi	r18, 0x28	; 40
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	f9 01       	movw	r30, r18
     7ce:	20 81       	ld	r18, Z
     7d0:	2d 7f       	andi	r18, 0xFD	; 253
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
     7d6:	88 e2       	ldi	r24, 0x28	; 40
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	20 e3       	ldi	r18, 0x30	; 48
     7dc:	fc 01       	movw	r30, r24
     7de:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     7e0:	88 e2       	ldi	r24, 0x28	; 40
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	28 e2       	ldi	r18, 0x28	; 40
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	f9 01       	movw	r30, r18
     7ea:	20 81       	ld	r18, Z
     7ec:	24 60       	ori	r18, 0x04	; 4
     7ee:	fc 01       	movw	r30, r24
     7f0:	20 83       	st	Z, r18
     7f2:	9e 01       	movw	r18, r28
     7f4:	29 5b       	subi	r18, 0xB9	; 185
     7f6:	3f 4f       	sbci	r19, 0xFF	; 255
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	a0 ea       	ldi	r26, 0xA0	; 160
     7fe:	b0 e4       	ldi	r27, 0x40	; 64
     800:	f9 01       	movw	r30, r18
     802:	80 83       	st	Z, r24
     804:	91 83       	std	Z+1, r25	; 0x01
     806:	a2 83       	std	Z+2, r26	; 0x02
     808:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     80a:	8e 01       	movw	r16, r28
     80c:	05 5b       	subi	r16, 0xB5	; 181
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	89 5b       	subi	r24, 0xB9	; 185
     814:	9f 4f       	sbci	r25, 0xFF	; 255
     816:	fc 01       	movw	r30, r24
     818:	60 81       	ld	r22, Z
     81a:	71 81       	ldd	r23, Z+1	; 0x01
     81c:	82 81       	ldd	r24, Z+2	; 0x02
     81e:	93 81       	ldd	r25, Z+3	; 0x03
     820:	26 e6       	ldi	r18, 0x66	; 102
     822:	36 e6       	ldi	r19, 0x66	; 102
     824:	46 e6       	ldi	r20, 0x66	; 102
     826:	55 e4       	ldi	r21, 0x45	; 69
     828:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     82c:	dc 01       	movw	r26, r24
     82e:	cb 01       	movw	r24, r22
     830:	f8 01       	movw	r30, r16
     832:	80 83       	st	Z, r24
     834:	91 83       	std	Z+1, r25	; 0x01
     836:	a2 83       	std	Z+2, r26	; 0x02
     838:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     83a:	ce 01       	movw	r24, r28
     83c:	85 5b       	subi	r24, 0xB5	; 181
     83e:	9f 4f       	sbci	r25, 0xFF	; 255
     840:	11 e0       	ldi	r17, 0x01	; 1
     842:	fc 01       	movw	r30, r24
     844:	60 81       	ld	r22, Z
     846:	71 81       	ldd	r23, Z+1	; 0x01
     848:	82 81       	ldd	r24, Z+2	; 0x02
     84a:	93 81       	ldd	r25, Z+3	; 0x03
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	40 e8       	ldi	r20, 0x80	; 128
     852:	5f e3       	ldi	r21, 0x3F	; 63
     854:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__cmpsf2>
     858:	88 23       	and	r24, r24
     85a:	0c f0       	brlt	.+2      	; 0x85e <lcd_set_4bit+0x6f0>
     85c:	10 e0       	ldi	r17, 0x00	; 0
     85e:	11 23       	and	r17, r17
     860:	49 f0       	breq	.+18     	; 0x874 <lcd_set_4bit+0x706>
		__ticks = 1;
     862:	ce 01       	movw	r24, r28
     864:	81 5b       	subi	r24, 0xB1	; 177
     866:	9f 4f       	sbci	r25, 0xFF	; 255
     868:	21 e0       	ldi	r18, 0x01	; 1
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	fc 01       	movw	r30, r24
     86e:	31 83       	std	Z+1, r19	; 0x01
     870:	20 83       	st	Z, r18
     872:	74 c0       	rjmp	.+232    	; 0x95c <lcd_set_4bit+0x7ee>
	else if (__tmp > 65535)
     874:	ce 01       	movw	r24, r28
     876:	85 5b       	subi	r24, 0xB5	; 181
     878:	9f 4f       	sbci	r25, 0xFF	; 255
     87a:	11 e0       	ldi	r17, 0x01	; 1
     87c:	fc 01       	movw	r30, r24
     87e:	60 81       	ld	r22, Z
     880:	71 81       	ldd	r23, Z+1	; 0x01
     882:	82 81       	ldd	r24, Z+2	; 0x02
     884:	93 81       	ldd	r25, Z+3	; 0x03
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	3f ef       	ldi	r19, 0xFF	; 255
     88a:	4f e7       	ldi	r20, 0x7F	; 127
     88c:	57 e4       	ldi	r21, 0x47	; 71
     88e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__gesf2>
     892:	18 16       	cp	r1, r24
     894:	0c f0       	brlt	.+2      	; 0x898 <lcd_set_4bit+0x72a>
     896:	10 e0       	ldi	r17, 0x00	; 0
     898:	11 23       	and	r17, r17
     89a:	09 f4       	brne	.+2      	; 0x89e <lcd_set_4bit+0x730>
     89c:	4d c0       	rjmp	.+154    	; 0x938 <lcd_set_4bit+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     89e:	ce 01       	movw	r24, r28
     8a0:	89 5b       	subi	r24, 0xB9	; 185
     8a2:	9f 4f       	sbci	r25, 0xFF	; 255
     8a4:	fc 01       	movw	r30, r24
     8a6:	60 81       	ld	r22, Z
     8a8:	71 81       	ldd	r23, Z+1	; 0x01
     8aa:	82 81       	ldd	r24, Z+2	; 0x02
     8ac:	93 81       	ldd	r25, Z+3	; 0x03
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	40 e2       	ldi	r20, 0x20	; 32
     8b4:	51 e4       	ldi	r21, 0x41	; 65
     8b6:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     8ba:	dc 01       	movw	r26, r24
     8bc:	cb 01       	movw	r24, r22
     8be:	8e 01       	movw	r16, r28
     8c0:	01 5b       	subi	r16, 0xB1	; 177
     8c2:	1f 4f       	sbci	r17, 0xFF	; 255
     8c4:	bc 01       	movw	r22, r24
     8c6:	cd 01       	movw	r24, r26
     8c8:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
     8cc:	dc 01       	movw	r26, r24
     8ce:	cb 01       	movw	r24, r22
     8d0:	f8 01       	movw	r30, r16
     8d2:	91 83       	std	Z+1, r25	; 0x01
     8d4:	80 83       	st	Z, r24
     8d6:	27 c0       	rjmp	.+78     	; 0x926 <lcd_set_4bit+0x7b8>
     8d8:	ce 01       	movw	r24, r28
     8da:	8f 5a       	subi	r24, 0xAF	; 175
     8dc:	9f 4f       	sbci	r25, 0xFF	; 255
     8de:	20 e7       	ldi	r18, 0x70	; 112
     8e0:	31 e0       	ldi	r19, 0x01	; 1
     8e2:	fc 01       	movw	r30, r24
     8e4:	31 83       	std	Z+1, r19	; 0x01
     8e6:	20 83       	st	Z, r18
     8e8:	ce 01       	movw	r24, r28
     8ea:	8f 5a       	subi	r24, 0xAF	; 175
     8ec:	9f 4f       	sbci	r25, 0xFF	; 255
     8ee:	fc 01       	movw	r30, r24
     8f0:	80 81       	ld	r24, Z
     8f2:	91 81       	ldd	r25, Z+1	; 0x01
     8f4:	8c 01       	movw	r16, r24
     8f6:	c8 01       	movw	r24, r16
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <lcd_set_4bit+0x78a>
     8fc:	8c 01       	movw	r16, r24
     8fe:	ce 01       	movw	r24, r28
     900:	8f 5a       	subi	r24, 0xAF	; 175
     902:	9f 4f       	sbci	r25, 0xFF	; 255
     904:	fc 01       	movw	r30, r24
     906:	11 83       	std	Z+1, r17	; 0x01
     908:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     90a:	ce 01       	movw	r24, r28
     90c:	81 5b       	subi	r24, 0xB1	; 177
     90e:	9f 4f       	sbci	r25, 0xFF	; 255
     910:	9e 01       	movw	r18, r28
     912:	21 5b       	subi	r18, 0xB1	; 177
     914:	3f 4f       	sbci	r19, 0xFF	; 255
     916:	f9 01       	movw	r30, r18
     918:	20 81       	ld	r18, Z
     91a:	31 81       	ldd	r19, Z+1	; 0x01
     91c:	21 50       	subi	r18, 0x01	; 1
     91e:	30 40       	sbci	r19, 0x00	; 0
     920:	fc 01       	movw	r30, r24
     922:	31 83       	std	Z+1, r19	; 0x01
     924:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     926:	ce 01       	movw	r24, r28
     928:	81 5b       	subi	r24, 0xB1	; 177
     92a:	9f 4f       	sbci	r25, 0xFF	; 255
     92c:	fc 01       	movw	r30, r24
     92e:	80 81       	ld	r24, Z
     930:	91 81       	ldd	r25, Z+1	; 0x01
     932:	00 97       	sbiw	r24, 0x00	; 0
     934:	89 f6       	brne	.-94     	; 0x8d8 <lcd_set_4bit+0x76a>
     936:	2f c0       	rjmp	.+94     	; 0x996 <lcd_set_4bit+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     938:	8e 01       	movw	r16, r28
     93a:	01 5b       	subi	r16, 0xB1	; 177
     93c:	1f 4f       	sbci	r17, 0xFF	; 255
     93e:	ce 01       	movw	r24, r28
     940:	85 5b       	subi	r24, 0xB5	; 181
     942:	9f 4f       	sbci	r25, 0xFF	; 255
     944:	fc 01       	movw	r30, r24
     946:	60 81       	ld	r22, Z
     948:	71 81       	ldd	r23, Z+1	; 0x01
     94a:	82 81       	ldd	r24, Z+2	; 0x02
     94c:	93 81       	ldd	r25, Z+3	; 0x03
     94e:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
     952:	dc 01       	movw	r26, r24
     954:	cb 01       	movw	r24, r22
     956:	f8 01       	movw	r30, r16
     958:	91 83       	std	Z+1, r25	; 0x01
     95a:	80 83       	st	Z, r24
     95c:	ce 01       	movw	r24, r28
     95e:	8d 5a       	subi	r24, 0xAD	; 173
     960:	9f 4f       	sbci	r25, 0xFF	; 255
     962:	9e 01       	movw	r18, r28
     964:	21 5b       	subi	r18, 0xB1	; 177
     966:	3f 4f       	sbci	r19, 0xFF	; 255
     968:	f9 01       	movw	r30, r18
     96a:	20 81       	ld	r18, Z
     96c:	31 81       	ldd	r19, Z+1	; 0x01
     96e:	fc 01       	movw	r30, r24
     970:	31 83       	std	Z+1, r19	; 0x01
     972:	20 83       	st	Z, r18
     974:	ce 01       	movw	r24, r28
     976:	8d 5a       	subi	r24, 0xAD	; 173
     978:	9f 4f       	sbci	r25, 0xFF	; 255
     97a:	fc 01       	movw	r30, r24
     97c:	80 81       	ld	r24, Z
     97e:	91 81       	ldd	r25, Z+1	; 0x01
     980:	8c 01       	movw	r16, r24
     982:	c8 01       	movw	r24, r16
     984:	01 97       	sbiw	r24, 0x01	; 1
     986:	f1 f7       	brne	.-4      	; 0x984 <lcd_set_4bit+0x816>
     988:	8c 01       	movw	r16, r24
     98a:	ce 01       	movw	r24, r28
     98c:	8d 5a       	subi	r24, 0xAD	; 173
     98e:	9f 4f       	sbci	r25, 0xFF	; 255
     990:	fc 01       	movw	r30, r24
     992:	11 83       	std	Z+1, r17	; 0x01
     994:	00 83       	st	Z, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     996:	88 e2       	ldi	r24, 0x28	; 40
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	28 e2       	ldi	r18, 0x28	; 40
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	f9 01       	movw	r30, r18
     9a0:	20 81       	ld	r18, Z
     9a2:	2b 7f       	andi	r18, 0xFB	; 251
     9a4:	fc 01       	movw	r30, r24
     9a6:	20 83       	st	Z, r18
     9a8:	9e 01       	movw	r18, r28
     9aa:	2b 5a       	subi	r18, 0xAB	; 171
     9ac:	3f 4f       	sbci	r19, 0xFF	; 255
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	a0 e8       	ldi	r26, 0x80	; 128
     9b4:	bf e3       	ldi	r27, 0x3F	; 63
     9b6:	f9 01       	movw	r30, r18
     9b8:	80 83       	st	Z, r24
     9ba:	91 83       	std	Z+1, r25	; 0x01
     9bc:	a2 83       	std	Z+2, r26	; 0x02
     9be:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     9c0:	8e 01       	movw	r16, r28
     9c2:	07 5a       	subi	r16, 0xA7	; 167
     9c4:	1f 4f       	sbci	r17, 0xFF	; 255
     9c6:	ce 01       	movw	r24, r28
     9c8:	8b 5a       	subi	r24, 0xAB	; 171
     9ca:	9f 4f       	sbci	r25, 0xFF	; 255
     9cc:	fc 01       	movw	r30, r24
     9ce:	60 81       	ld	r22, Z
     9d0:	71 81       	ldd	r23, Z+1	; 0x01
     9d2:	82 81       	ldd	r24, Z+2	; 0x02
     9d4:	93 81       	ldd	r25, Z+3	; 0x03
     9d6:	26 e6       	ldi	r18, 0x66	; 102
     9d8:	36 e6       	ldi	r19, 0x66	; 102
     9da:	46 e6       	ldi	r20, 0x66	; 102
     9dc:	55 e4       	ldi	r21, 0x45	; 69
     9de:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     9e2:	dc 01       	movw	r26, r24
     9e4:	cb 01       	movw	r24, r22
     9e6:	f8 01       	movw	r30, r16
     9e8:	80 83       	st	Z, r24
     9ea:	91 83       	std	Z+1, r25	; 0x01
     9ec:	a2 83       	std	Z+2, r26	; 0x02
     9ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9f0:	ce 01       	movw	r24, r28
     9f2:	87 5a       	subi	r24, 0xA7	; 167
     9f4:	9f 4f       	sbci	r25, 0xFF	; 255
     9f6:	11 e0       	ldi	r17, 0x01	; 1
     9f8:	fc 01       	movw	r30, r24
     9fa:	60 81       	ld	r22, Z
     9fc:	71 81       	ldd	r23, Z+1	; 0x01
     9fe:	82 81       	ldd	r24, Z+2	; 0x02
     a00:	93 81       	ldd	r25, Z+3	; 0x03
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	40 e8       	ldi	r20, 0x80	; 128
     a08:	5f e3       	ldi	r21, 0x3F	; 63
     a0a:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__cmpsf2>
     a0e:	88 23       	and	r24, r24
     a10:	0c f0       	brlt	.+2      	; 0xa14 <lcd_set_4bit+0x8a6>
     a12:	10 e0       	ldi	r17, 0x00	; 0
     a14:	11 23       	and	r17, r17
     a16:	49 f0       	breq	.+18     	; 0xa2a <lcd_set_4bit+0x8bc>
		__ticks = 1;
     a18:	ce 01       	movw	r24, r28
     a1a:	83 5a       	subi	r24, 0xA3	; 163
     a1c:	9f 4f       	sbci	r25, 0xFF	; 255
     a1e:	21 e0       	ldi	r18, 0x01	; 1
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	fc 01       	movw	r30, r24
     a24:	31 83       	std	Z+1, r19	; 0x01
     a26:	20 83       	st	Z, r18
     a28:	74 c0       	rjmp	.+232    	; 0xb12 <lcd_set_4bit+0x9a4>
	else if (__tmp > 65535)
     a2a:	ce 01       	movw	r24, r28
     a2c:	87 5a       	subi	r24, 0xA7	; 167
     a2e:	9f 4f       	sbci	r25, 0xFF	; 255
     a30:	11 e0       	ldi	r17, 0x01	; 1
     a32:	fc 01       	movw	r30, r24
     a34:	60 81       	ld	r22, Z
     a36:	71 81       	ldd	r23, Z+1	; 0x01
     a38:	82 81       	ldd	r24, Z+2	; 0x02
     a3a:	93 81       	ldd	r25, Z+3	; 0x03
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	3f ef       	ldi	r19, 0xFF	; 255
     a40:	4f e7       	ldi	r20, 0x7F	; 127
     a42:	57 e4       	ldi	r21, 0x47	; 71
     a44:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__gesf2>
     a48:	18 16       	cp	r1, r24
     a4a:	0c f0       	brlt	.+2      	; 0xa4e <lcd_set_4bit+0x8e0>
     a4c:	10 e0       	ldi	r17, 0x00	; 0
     a4e:	11 23       	and	r17, r17
     a50:	09 f4       	brne	.+2      	; 0xa54 <lcd_set_4bit+0x8e6>
     a52:	4d c0       	rjmp	.+154    	; 0xaee <lcd_set_4bit+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a54:	ce 01       	movw	r24, r28
     a56:	8b 5a       	subi	r24, 0xAB	; 171
     a58:	9f 4f       	sbci	r25, 0xFF	; 255
     a5a:	fc 01       	movw	r30, r24
     a5c:	60 81       	ld	r22, Z
     a5e:	71 81       	ldd	r23, Z+1	; 0x01
     a60:	82 81       	ldd	r24, Z+2	; 0x02
     a62:	93 81       	ldd	r25, Z+3	; 0x03
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	40 e2       	ldi	r20, 0x20	; 32
     a6a:	51 e4       	ldi	r21, 0x41	; 65
     a6c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     a70:	dc 01       	movw	r26, r24
     a72:	cb 01       	movw	r24, r22
     a74:	8e 01       	movw	r16, r28
     a76:	03 5a       	subi	r16, 0xA3	; 163
     a78:	1f 4f       	sbci	r17, 0xFF	; 255
     a7a:	bc 01       	movw	r22, r24
     a7c:	cd 01       	movw	r24, r26
     a7e:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
     a82:	dc 01       	movw	r26, r24
     a84:	cb 01       	movw	r24, r22
     a86:	f8 01       	movw	r30, r16
     a88:	91 83       	std	Z+1, r25	; 0x01
     a8a:	80 83       	st	Z, r24
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <lcd_set_4bit+0x96e>
     a8e:	ce 01       	movw	r24, r28
     a90:	81 5a       	subi	r24, 0xA1	; 161
     a92:	9f 4f       	sbci	r25, 0xFF	; 255
     a94:	20 e7       	ldi	r18, 0x70	; 112
     a96:	31 e0       	ldi	r19, 0x01	; 1
     a98:	fc 01       	movw	r30, r24
     a9a:	31 83       	std	Z+1, r19	; 0x01
     a9c:	20 83       	st	Z, r18
     a9e:	ce 01       	movw	r24, r28
     aa0:	81 5a       	subi	r24, 0xA1	; 161
     aa2:	9f 4f       	sbci	r25, 0xFF	; 255
     aa4:	fc 01       	movw	r30, r24
     aa6:	80 81       	ld	r24, Z
     aa8:	91 81       	ldd	r25, Z+1	; 0x01
     aaa:	8c 01       	movw	r16, r24
     aac:	c8 01       	movw	r24, r16
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	f1 f7       	brne	.-4      	; 0xaae <lcd_set_4bit+0x940>
     ab2:	8c 01       	movw	r16, r24
     ab4:	ce 01       	movw	r24, r28
     ab6:	81 5a       	subi	r24, 0xA1	; 161
     ab8:	9f 4f       	sbci	r25, 0xFF	; 255
     aba:	fc 01       	movw	r30, r24
     abc:	11 83       	std	Z+1, r17	; 0x01
     abe:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac0:	ce 01       	movw	r24, r28
     ac2:	83 5a       	subi	r24, 0xA3	; 163
     ac4:	9f 4f       	sbci	r25, 0xFF	; 255
     ac6:	9e 01       	movw	r18, r28
     ac8:	23 5a       	subi	r18, 0xA3	; 163
     aca:	3f 4f       	sbci	r19, 0xFF	; 255
     acc:	f9 01       	movw	r30, r18
     ace:	20 81       	ld	r18, Z
     ad0:	31 81       	ldd	r19, Z+1	; 0x01
     ad2:	21 50       	subi	r18, 0x01	; 1
     ad4:	30 40       	sbci	r19, 0x00	; 0
     ad6:	fc 01       	movw	r30, r24
     ad8:	31 83       	std	Z+1, r19	; 0x01
     ada:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     adc:	ce 01       	movw	r24, r28
     ade:	83 5a       	subi	r24, 0xA3	; 163
     ae0:	9f 4f       	sbci	r25, 0xFF	; 255
     ae2:	fc 01       	movw	r30, r24
     ae4:	80 81       	ld	r24, Z
     ae6:	91 81       	ldd	r25, Z+1	; 0x01
     ae8:	00 97       	sbiw	r24, 0x00	; 0
     aea:	89 f6       	brne	.-94     	; 0xa8e <lcd_set_4bit+0x920>
     aec:	2f c0       	rjmp	.+94     	; 0xb4c <lcd_set_4bit+0x9de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aee:	8e 01       	movw	r16, r28
     af0:	03 5a       	subi	r16, 0xA3	; 163
     af2:	1f 4f       	sbci	r17, 0xFF	; 255
     af4:	ce 01       	movw	r24, r28
     af6:	87 5a       	subi	r24, 0xA7	; 167
     af8:	9f 4f       	sbci	r25, 0xFF	; 255
     afa:	fc 01       	movw	r30, r24
     afc:	60 81       	ld	r22, Z
     afe:	71 81       	ldd	r23, Z+1	; 0x01
     b00:	82 81       	ldd	r24, Z+2	; 0x02
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
     b08:	dc 01       	movw	r26, r24
     b0a:	cb 01       	movw	r24, r22
     b0c:	f8 01       	movw	r30, r16
     b0e:	91 83       	std	Z+1, r25	; 0x01
     b10:	80 83       	st	Z, r24
     b12:	ce 01       	movw	r24, r28
     b14:	8f 59       	subi	r24, 0x9F	; 159
     b16:	9f 4f       	sbci	r25, 0xFF	; 255
     b18:	9e 01       	movw	r18, r28
     b1a:	23 5a       	subi	r18, 0xA3	; 163
     b1c:	3f 4f       	sbci	r19, 0xFF	; 255
     b1e:	f9 01       	movw	r30, r18
     b20:	20 81       	ld	r18, Z
     b22:	31 81       	ldd	r19, Z+1	; 0x01
     b24:	fc 01       	movw	r30, r24
     b26:	31 83       	std	Z+1, r19	; 0x01
     b28:	20 83       	st	Z, r18
     b2a:	ce 01       	movw	r24, r28
     b2c:	8f 59       	subi	r24, 0x9F	; 159
     b2e:	9f 4f       	sbci	r25, 0xFF	; 255
     b30:	fc 01       	movw	r30, r24
     b32:	80 81       	ld	r24, Z
     b34:	91 81       	ldd	r25, Z+1	; 0x01
     b36:	8c 01       	movw	r16, r24
     b38:	c8 01       	movw	r24, r16
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <lcd_set_4bit+0x9cc>
     b3e:	8c 01       	movw	r16, r24
     b40:	ce 01       	movw	r24, r28
     b42:	8f 59       	subi	r24, 0x9F	; 159
     b44:	9f 4f       	sbci	r25, 0xFF	; 255
     b46:	fc 01       	movw	r30, r24
     b48:	11 83       	std	Z+1, r17	; 0x01
     b4a:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b4c:	88 e2       	ldi	r24, 0x28	; 40
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	28 e2       	ldi	r18, 0x28	; 40
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	f9 01       	movw	r30, r18
     b56:	20 81       	ld	r18, Z
     b58:	2e 7f       	andi	r18, 0xFE	; 254
     b5a:	fc 01       	movw	r30, r24
     b5c:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     b5e:	88 e2       	ldi	r24, 0x28	; 40
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	28 e2       	ldi	r18, 0x28	; 40
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	f9 01       	movw	r30, r18
     b68:	20 81       	ld	r18, Z
     b6a:	2d 7f       	andi	r18, 0xFD	; 253
     b6c:	fc 01       	movw	r30, r24
     b6e:	20 83       	st	Z, r18
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     b70:	88 e2       	ldi	r24, 0x28	; 40
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	20 e2       	ldi	r18, 0x20	; 32
     b76:	fc 01       	movw	r30, r24
     b78:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     b7a:	88 e2       	ldi	r24, 0x28	; 40
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	28 e2       	ldi	r18, 0x28	; 40
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	f9 01       	movw	r30, r18
     b84:	20 81       	ld	r18, Z
     b86:	24 60       	ori	r18, 0x04	; 4
     b88:	fc 01       	movw	r30, r24
     b8a:	20 83       	st	Z, r18
     b8c:	9e 01       	movw	r18, r28
     b8e:	2d 59       	subi	r18, 0x9D	; 157
     b90:	3f 4f       	sbci	r19, 0xFF	; 255
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	a0 ea       	ldi	r26, 0xA0	; 160
     b98:	b0 e4       	ldi	r27, 0x40	; 64
     b9a:	f9 01       	movw	r30, r18
     b9c:	80 83       	st	Z, r24
     b9e:	91 83       	std	Z+1, r25	; 0x01
     ba0:	a2 83       	std	Z+2, r26	; 0x02
     ba2:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     ba4:	8e 01       	movw	r16, r28
     ba6:	09 59       	subi	r16, 0x99	; 153
     ba8:	1f 4f       	sbci	r17, 0xFF	; 255
     baa:	ce 01       	movw	r24, r28
     bac:	8d 59       	subi	r24, 0x9D	; 157
     bae:	9f 4f       	sbci	r25, 0xFF	; 255
     bb0:	fc 01       	movw	r30, r24
     bb2:	60 81       	ld	r22, Z
     bb4:	71 81       	ldd	r23, Z+1	; 0x01
     bb6:	82 81       	ldd	r24, Z+2	; 0x02
     bb8:	93 81       	ldd	r25, Z+3	; 0x03
     bba:	26 e6       	ldi	r18, 0x66	; 102
     bbc:	36 e6       	ldi	r19, 0x66	; 102
     bbe:	46 e6       	ldi	r20, 0x66	; 102
     bc0:	55 e4       	ldi	r21, 0x45	; 69
     bc2:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	f8 01       	movw	r30, r16
     bcc:	80 83       	st	Z, r24
     bce:	91 83       	std	Z+1, r25	; 0x01
     bd0:	a2 83       	std	Z+2, r26	; 0x02
     bd2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bd4:	ce 01       	movw	r24, r28
     bd6:	89 59       	subi	r24, 0x99	; 153
     bd8:	9f 4f       	sbci	r25, 0xFF	; 255
     bda:	11 e0       	ldi	r17, 0x01	; 1
     bdc:	fc 01       	movw	r30, r24
     bde:	60 81       	ld	r22, Z
     be0:	71 81       	ldd	r23, Z+1	; 0x01
     be2:	82 81       	ldd	r24, Z+2	; 0x02
     be4:	93 81       	ldd	r25, Z+3	; 0x03
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	40 e8       	ldi	r20, 0x80	; 128
     bec:	5f e3       	ldi	r21, 0x3F	; 63
     bee:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__cmpsf2>
     bf2:	88 23       	and	r24, r24
     bf4:	0c f0       	brlt	.+2      	; 0xbf8 <lcd_set_4bit+0xa8a>
     bf6:	10 e0       	ldi	r17, 0x00	; 0
     bf8:	11 23       	and	r17, r17
     bfa:	49 f0       	breq	.+18     	; 0xc0e <lcd_set_4bit+0xaa0>
		__ticks = 1;
     bfc:	ce 01       	movw	r24, r28
     bfe:	85 59       	subi	r24, 0x95	; 149
     c00:	9f 4f       	sbci	r25, 0xFF	; 255
     c02:	21 e0       	ldi	r18, 0x01	; 1
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	fc 01       	movw	r30, r24
     c08:	31 83       	std	Z+1, r19	; 0x01
     c0a:	20 83       	st	Z, r18
     c0c:	74 c0       	rjmp	.+232    	; 0xcf6 <lcd_set_4bit+0xb88>
	else if (__tmp > 65535)
     c0e:	ce 01       	movw	r24, r28
     c10:	89 59       	subi	r24, 0x99	; 153
     c12:	9f 4f       	sbci	r25, 0xFF	; 255
     c14:	11 e0       	ldi	r17, 0x01	; 1
     c16:	fc 01       	movw	r30, r24
     c18:	60 81       	ld	r22, Z
     c1a:	71 81       	ldd	r23, Z+1	; 0x01
     c1c:	82 81       	ldd	r24, Z+2	; 0x02
     c1e:	93 81       	ldd	r25, Z+3	; 0x03
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	3f ef       	ldi	r19, 0xFF	; 255
     c24:	4f e7       	ldi	r20, 0x7F	; 127
     c26:	57 e4       	ldi	r21, 0x47	; 71
     c28:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__gesf2>
     c2c:	18 16       	cp	r1, r24
     c2e:	0c f0       	brlt	.+2      	; 0xc32 <lcd_set_4bit+0xac4>
     c30:	10 e0       	ldi	r17, 0x00	; 0
     c32:	11 23       	and	r17, r17
     c34:	09 f4       	brne	.+2      	; 0xc38 <lcd_set_4bit+0xaca>
     c36:	4d c0       	rjmp	.+154    	; 0xcd2 <lcd_set_4bit+0xb64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c38:	ce 01       	movw	r24, r28
     c3a:	8d 59       	subi	r24, 0x9D	; 157
     c3c:	9f 4f       	sbci	r25, 0xFF	; 255
     c3e:	fc 01       	movw	r30, r24
     c40:	60 81       	ld	r22, Z
     c42:	71 81       	ldd	r23, Z+1	; 0x01
     c44:	82 81       	ldd	r24, Z+2	; 0x02
     c46:	93 81       	ldd	r25, Z+3	; 0x03
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e2       	ldi	r20, 0x20	; 32
     c4e:	51 e4       	ldi	r21, 0x41	; 65
     c50:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
     c58:	8e 01       	movw	r16, r28
     c5a:	05 59       	subi	r16, 0x95	; 149
     c5c:	1f 4f       	sbci	r17, 0xFF	; 255
     c5e:	bc 01       	movw	r22, r24
     c60:	cd 01       	movw	r24, r26
     c62:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
     c66:	dc 01       	movw	r26, r24
     c68:	cb 01       	movw	r24, r22
     c6a:	f8 01       	movw	r30, r16
     c6c:	91 83       	std	Z+1, r25	; 0x01
     c6e:	80 83       	st	Z, r24
     c70:	27 c0       	rjmp	.+78     	; 0xcc0 <lcd_set_4bit+0xb52>
     c72:	ce 01       	movw	r24, r28
     c74:	83 59       	subi	r24, 0x93	; 147
     c76:	9f 4f       	sbci	r25, 0xFF	; 255
     c78:	20 e7       	ldi	r18, 0x70	; 112
     c7a:	31 e0       	ldi	r19, 0x01	; 1
     c7c:	fc 01       	movw	r30, r24
     c7e:	31 83       	std	Z+1, r19	; 0x01
     c80:	20 83       	st	Z, r18
     c82:	ce 01       	movw	r24, r28
     c84:	83 59       	subi	r24, 0x93	; 147
     c86:	9f 4f       	sbci	r25, 0xFF	; 255
     c88:	fc 01       	movw	r30, r24
     c8a:	80 81       	ld	r24, Z
     c8c:	91 81       	ldd	r25, Z+1	; 0x01
     c8e:	8c 01       	movw	r16, r24
     c90:	c8 01       	movw	r24, r16
     c92:	01 97       	sbiw	r24, 0x01	; 1
     c94:	f1 f7       	brne	.-4      	; 0xc92 <lcd_set_4bit+0xb24>
     c96:	8c 01       	movw	r16, r24
     c98:	ce 01       	movw	r24, r28
     c9a:	83 59       	subi	r24, 0x93	; 147
     c9c:	9f 4f       	sbci	r25, 0xFF	; 255
     c9e:	fc 01       	movw	r30, r24
     ca0:	11 83       	std	Z+1, r17	; 0x01
     ca2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ca4:	ce 01       	movw	r24, r28
     ca6:	85 59       	subi	r24, 0x95	; 149
     ca8:	9f 4f       	sbci	r25, 0xFF	; 255
     caa:	9e 01       	movw	r18, r28
     cac:	25 59       	subi	r18, 0x95	; 149
     cae:	3f 4f       	sbci	r19, 0xFF	; 255
     cb0:	f9 01       	movw	r30, r18
     cb2:	20 81       	ld	r18, Z
     cb4:	31 81       	ldd	r19, Z+1	; 0x01
     cb6:	21 50       	subi	r18, 0x01	; 1
     cb8:	30 40       	sbci	r19, 0x00	; 0
     cba:	fc 01       	movw	r30, r24
     cbc:	31 83       	std	Z+1, r19	; 0x01
     cbe:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cc0:	ce 01       	movw	r24, r28
     cc2:	85 59       	subi	r24, 0x95	; 149
     cc4:	9f 4f       	sbci	r25, 0xFF	; 255
     cc6:	fc 01       	movw	r30, r24
     cc8:	80 81       	ld	r24, Z
     cca:	91 81       	ldd	r25, Z+1	; 0x01
     ccc:	00 97       	sbiw	r24, 0x00	; 0
     cce:	89 f6       	brne	.-94     	; 0xc72 <lcd_set_4bit+0xb04>
     cd0:	2f c0       	rjmp	.+94     	; 0xd30 <lcd_set_4bit+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cd2:	8e 01       	movw	r16, r28
     cd4:	05 59       	subi	r16, 0x95	; 149
     cd6:	1f 4f       	sbci	r17, 0xFF	; 255
     cd8:	ce 01       	movw	r24, r28
     cda:	89 59       	subi	r24, 0x99	; 153
     cdc:	9f 4f       	sbci	r25, 0xFF	; 255
     cde:	fc 01       	movw	r30, r24
     ce0:	60 81       	ld	r22, Z
     ce2:	71 81       	ldd	r23, Z+1	; 0x01
     ce4:	82 81       	ldd	r24, Z+2	; 0x02
     ce6:	93 81       	ldd	r25, Z+3	; 0x03
     ce8:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	f8 01       	movw	r30, r16
     cf2:	91 83       	std	Z+1, r25	; 0x01
     cf4:	80 83       	st	Z, r24
     cf6:	ce 01       	movw	r24, r28
     cf8:	81 59       	subi	r24, 0x91	; 145
     cfa:	9f 4f       	sbci	r25, 0xFF	; 255
     cfc:	9e 01       	movw	r18, r28
     cfe:	25 59       	subi	r18, 0x95	; 149
     d00:	3f 4f       	sbci	r19, 0xFF	; 255
     d02:	f9 01       	movw	r30, r18
     d04:	20 81       	ld	r18, Z
     d06:	31 81       	ldd	r19, Z+1	; 0x01
     d08:	fc 01       	movw	r30, r24
     d0a:	31 83       	std	Z+1, r19	; 0x01
     d0c:	20 83       	st	Z, r18
     d0e:	ce 01       	movw	r24, r28
     d10:	81 59       	subi	r24, 0x91	; 145
     d12:	9f 4f       	sbci	r25, 0xFF	; 255
     d14:	fc 01       	movw	r30, r24
     d16:	80 81       	ld	r24, Z
     d18:	91 81       	ldd	r25, Z+1	; 0x01
     d1a:	8c 01       	movw	r16, r24
     d1c:	c8 01       	movw	r24, r16
     d1e:	01 97       	sbiw	r24, 0x01	; 1
     d20:	f1 f7       	brne	.-4      	; 0xd1e <lcd_set_4bit+0xbb0>
     d22:	8c 01       	movw	r16, r24
     d24:	ce 01       	movw	r24, r28
     d26:	81 59       	subi	r24, 0x91	; 145
     d28:	9f 4f       	sbci	r25, 0xFF	; 255
     d2a:	fc 01       	movw	r30, r24
     d2c:	11 83       	std	Z+1, r17	; 0x01
     d2e:	00 83       	st	Z, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     d30:	88 e2       	ldi	r24, 0x28	; 40
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	28 e2       	ldi	r18, 0x28	; 40
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	f9 01       	movw	r30, r18
     d3a:	20 81       	ld	r18, Z
     d3c:	2b 7f       	andi	r18, 0xFB	; 251
     d3e:	fc 01       	movw	r30, r24
     d40:	20 83       	st	Z, r18

	
}
     d42:	c0 59       	subi	r28, 0x90	; 144
     d44:	df 4f       	sbci	r29, 0xFF	; 255
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	08 95       	ret

00000d5a <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	2e 97       	sbiw	r28, 0x0e	; 14
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	a0 e8       	ldi	r26, 0x80	; 128
     d78:	bf e3       	ldi	r27, 0x3F	; 63
     d7a:	89 83       	std	Y+1, r24	; 0x01
     d7c:	9a 83       	std	Y+2, r25	; 0x02
     d7e:	ab 83       	std	Y+3, r26	; 0x03
     d80:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     d82:	69 81       	ldd	r22, Y+1	; 0x01
     d84:	7a 81       	ldd	r23, Y+2	; 0x02
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	9c 81       	ldd	r25, Y+4	; 0x04
     d8a:	26 e6       	ldi	r18, 0x66	; 102
     d8c:	36 e6       	ldi	r19, 0x66	; 102
     d8e:	46 e6       	ldi	r20, 0x66	; 102
     d90:	55 e4       	ldi	r21, 0x45	; 69
     d92:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	8d 83       	std	Y+5, r24	; 0x05
     d9c:	9e 83       	std	Y+6, r25	; 0x06
     d9e:	af 83       	std	Y+7, r26	; 0x07
     da0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     da2:	11 e0       	ldi	r17, 0x01	; 1
     da4:	6d 81       	ldd	r22, Y+5	; 0x05
     da6:	7e 81       	ldd	r23, Y+6	; 0x06
     da8:	8f 81       	ldd	r24, Y+7	; 0x07
     daa:	98 85       	ldd	r25, Y+8	; 0x08
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	40 e8       	ldi	r20, 0x80	; 128
     db2:	5f e3       	ldi	r21, 0x3F	; 63
     db4:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__cmpsf2>
     db8:	88 23       	and	r24, r24
     dba:	0c f0       	brlt	.+2      	; 0xdbe <lcd_init+0x64>
     dbc:	10 e0       	ldi	r17, 0x00	; 0
     dbe:	11 23       	and	r17, r17
     dc0:	29 f0       	breq	.+10     	; 0xdcc <lcd_init+0x72>
		__ticks = 1;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	9a 87       	std	Y+10, r25	; 0x0a
     dc8:	89 87       	std	Y+9, r24	; 0x09
     dca:	46 c0       	rjmp	.+140    	; 0xe58 <lcd_init+0xfe>
	else if (__tmp > 65535)
     dcc:	11 e0       	ldi	r17, 0x01	; 1
     dce:	6d 81       	ldd	r22, Y+5	; 0x05
     dd0:	7e 81       	ldd	r23, Y+6	; 0x06
     dd2:	8f 81       	ldd	r24, Y+7	; 0x07
     dd4:	98 85       	ldd	r25, Y+8	; 0x08
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	3f ef       	ldi	r19, 0xFF	; 255
     dda:	4f e7       	ldi	r20, 0x7F	; 127
     ddc:	57 e4       	ldi	r21, 0x47	; 71
     dde:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__gesf2>
     de2:	18 16       	cp	r1, r24
     de4:	0c f0       	brlt	.+2      	; 0xde8 <lcd_init+0x8e>
     de6:	10 e0       	ldi	r17, 0x00	; 0
     de8:	11 23       	and	r17, r17
     dea:	61 f1       	breq	.+88     	; 0xe44 <lcd_init+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dec:	69 81       	ldd	r22, Y+1	; 0x01
     dee:	7a 81       	ldd	r23, Y+2	; 0x02
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	9c 81       	ldd	r25, Y+4	; 0x04
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	40 e2       	ldi	r20, 0x20	; 32
     dfa:	51 e4       	ldi	r21, 0x41	; 65
     dfc:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     e00:	dc 01       	movw	r26, r24
     e02:	cb 01       	movw	r24, r22
     e04:	bc 01       	movw	r22, r24
     e06:	cd 01       	movw	r24, r26
     e08:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	9a 87       	std	Y+10, r25	; 0x0a
     e12:	89 87       	std	Y+9, r24	; 0x09
     e14:	12 c0       	rjmp	.+36     	; 0xe3a <lcd_init+0xe0>
     e16:	80 e7       	ldi	r24, 0x70	; 112
     e18:	91 e0       	ldi	r25, 0x01	; 1
     e1a:	9c 87       	std	Y+12, r25	; 0x0c
     e1c:	8b 87       	std	Y+11, r24	; 0x0b
     e1e:	8b 85       	ldd	r24, Y+11	; 0x0b
     e20:	9c 85       	ldd	r25, Y+12	; 0x0c
     e22:	8c 01       	movw	r16, r24
     e24:	c8 01       	movw	r24, r16
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	f1 f7       	brne	.-4      	; 0xe26 <lcd_init+0xcc>
     e2a:	8c 01       	movw	r16, r24
     e2c:	1c 87       	std	Y+12, r17	; 0x0c
     e2e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e30:	89 85       	ldd	r24, Y+9	; 0x09
     e32:	9a 85       	ldd	r25, Y+10	; 0x0a
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	9a 87       	std	Y+10, r25	; 0x0a
     e38:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e3a:	89 85       	ldd	r24, Y+9	; 0x09
     e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	51 f7       	brne	.-44     	; 0xe16 <lcd_init+0xbc>
     e42:	17 c0       	rjmp	.+46     	; 0xe72 <lcd_init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e44:	6d 81       	ldd	r22, Y+5	; 0x05
     e46:	7e 81       	ldd	r23, Y+6	; 0x06
     e48:	8f 81       	ldd	r24, Y+7	; 0x07
     e4a:	98 85       	ldd	r25, Y+8	; 0x08
     e4c:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	9a 87       	std	Y+10, r25	; 0x0a
     e56:	89 87       	std	Y+9, r24	; 0x09
     e58:	89 85       	ldd	r24, Y+9	; 0x09
     e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5c:	9e 87       	std	Y+14, r25	; 0x0e
     e5e:	8d 87       	std	Y+13, r24	; 0x0d
     e60:	8d 85       	ldd	r24, Y+13	; 0x0d
     e62:	9e 85       	ldd	r25, Y+14	; 0x0e
     e64:	8c 01       	movw	r16, r24
     e66:	c8 01       	movw	r24, r16
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <lcd_init+0x10e>
     e6c:	8c 01       	movw	r16, r24
     e6e:	1e 87       	std	Y+14, r17	; 0x0e
     e70:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     e72:	22 e6       	ldi	r18, 0x62	; 98
     e74:	37 e0       	ldi	r19, 0x07	; 7
     e76:	88 e2       	ldi	r24, 0x28	; 40
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	f9 01       	movw	r30, r18
     e7c:	19 95       	eicall
	lcd_wr_command(0x01);
     e7e:	22 e6       	ldi	r18, 0x62	; 98
     e80:	37 e0       	ldi	r19, 0x07	; 7
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	f9 01       	movw	r30, r18
     e88:	19 95       	eicall
	lcd_wr_command(0x06);
     e8a:	22 e6       	ldi	r18, 0x62	; 98
     e8c:	37 e0       	ldi	r19, 0x07	; 7
     e8e:	86 e0       	ldi	r24, 0x06	; 6
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	f9 01       	movw	r30, r18
     e94:	19 95       	eicall
	lcd_wr_command(0x0E);
     e96:	22 e6       	ldi	r18, 0x62	; 98
     e98:	37 e0       	ldi	r19, 0x07	; 7
     e9a:	8e e0       	ldi	r24, 0x0E	; 14
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	f9 01       	movw	r30, r18
     ea0:	19 95       	eicall
	lcd_wr_command(0x80);
     ea2:	22 e6       	ldi	r18, 0x62	; 98
     ea4:	37 e0       	ldi	r19, 0x07	; 7
     ea6:	80 e8       	ldi	r24, 0x80	; 128
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	f9 01       	movw	r30, r18
     eac:	19 95       	eicall
	
}
     eae:	2e 96       	adiw	r28, 0x0e	; 14
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	08 95       	ret

00000ec4 <lcd_wr_command>:
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	6e 97       	sbiw	r28, 0x1e	; 30
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	cd bf       	out	0x3d, r28	; 61
     edc:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     ede:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ee0:	89 83       	std	Y+1, r24	; 0x01
	temp = temp & 0xF0;
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	80 7f       	andi	r24, 0xF0	; 240
     ee6:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
     ee8:	88 e2       	ldi	r24, 0x28	; 40
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	28 e2       	ldi	r18, 0x28	; 40
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	f9 01       	movw	r30, r18
     ef2:	20 81       	ld	r18, Z
     ef4:	2f 70       	andi	r18, 0x0F	; 15
     ef6:	fc 01       	movw	r30, r24
     ef8:	20 83       	st	Z, r18
	lcd_port |= temp;
     efa:	88 e2       	ldi	r24, 0x28	; 40
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	28 e2       	ldi	r18, 0x28	; 40
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	f9 01       	movw	r30, r18
     f04:	30 81       	ld	r19, Z
     f06:	29 81       	ldd	r18, Y+1	; 0x01
     f08:	23 2b       	or	r18, r19
     f0a:	fc 01       	movw	r30, r24
     f0c:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
     f0e:	88 e2       	ldi	r24, 0x28	; 40
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	28 e2       	ldi	r18, 0x28	; 40
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	f9 01       	movw	r30, r18
     f18:	20 81       	ld	r18, Z
     f1a:	2e 7f       	andi	r18, 0xFE	; 254
     f1c:	fc 01       	movw	r30, r24
     f1e:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
     f20:	88 e2       	ldi	r24, 0x28	; 40
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	28 e2       	ldi	r18, 0x28	; 40
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	f9 01       	movw	r30, r18
     f2a:	20 81       	ld	r18, Z
     f2c:	2d 7f       	andi	r18, 0xFD	; 253
     f2e:	fc 01       	movw	r30, r24
     f30:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
     f32:	88 e2       	ldi	r24, 0x28	; 40
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	28 e2       	ldi	r18, 0x28	; 40
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	f9 01       	movw	r30, r18
     f3c:	20 81       	ld	r18, Z
     f3e:	24 60       	ori	r18, 0x04	; 4
     f40:	fc 01       	movw	r30, r24
     f42:	20 83       	st	Z, r18
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	a0 ea       	ldi	r26, 0xA0	; 160
     f4a:	b0 e4       	ldi	r27, 0x40	; 64
     f4c:	8a 83       	std	Y+2, r24	; 0x02
     f4e:	9b 83       	std	Y+3, r25	; 0x03
     f50:	ac 83       	std	Y+4, r26	; 0x04
     f52:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     f54:	6a 81       	ldd	r22, Y+2	; 0x02
     f56:	7b 81       	ldd	r23, Y+3	; 0x03
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	9d 81       	ldd	r25, Y+5	; 0x05
     f5c:	26 e6       	ldi	r18, 0x66	; 102
     f5e:	36 e6       	ldi	r19, 0x66	; 102
     f60:	46 e6       	ldi	r20, 0x66	; 102
     f62:	55 e4       	ldi	r21, 0x45	; 69
     f64:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	8e 83       	std	Y+6, r24	; 0x06
     f6e:	9f 83       	std	Y+7, r25	; 0x07
     f70:	a8 87       	std	Y+8, r26	; 0x08
     f72:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     f74:	11 e0       	ldi	r17, 0x01	; 1
     f76:	6e 81       	ldd	r22, Y+6	; 0x06
     f78:	7f 81       	ldd	r23, Y+7	; 0x07
     f7a:	88 85       	ldd	r24, Y+8	; 0x08
     f7c:	99 85       	ldd	r25, Y+9	; 0x09
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	40 e8       	ldi	r20, 0x80	; 128
     f84:	5f e3       	ldi	r21, 0x3F	; 63
     f86:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__cmpsf2>
     f8a:	88 23       	and	r24, r24
     f8c:	0c f0       	brlt	.+2      	; 0xf90 <lcd_wr_command+0xcc>
     f8e:	10 e0       	ldi	r17, 0x00	; 0
     f90:	11 23       	and	r17, r17
     f92:	29 f0       	breq	.+10     	; 0xf9e <lcd_wr_command+0xda>
		__ticks = 1;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	9b 87       	std	Y+11, r25	; 0x0b
     f9a:	8a 87       	std	Y+10, r24	; 0x0a
     f9c:	46 c0       	rjmp	.+140    	; 0x102a <lcd_wr_command+0x166>
	else if (__tmp > 65535)
     f9e:	11 e0       	ldi	r17, 0x01	; 1
     fa0:	6e 81       	ldd	r22, Y+6	; 0x06
     fa2:	7f 81       	ldd	r23, Y+7	; 0x07
     fa4:	88 85       	ldd	r24, Y+8	; 0x08
     fa6:	99 85       	ldd	r25, Y+9	; 0x09
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	3f ef       	ldi	r19, 0xFF	; 255
     fac:	4f e7       	ldi	r20, 0x7F	; 127
     fae:	57 e4       	ldi	r21, 0x47	; 71
     fb0:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__gesf2>
     fb4:	18 16       	cp	r1, r24
     fb6:	0c f0       	brlt	.+2      	; 0xfba <lcd_wr_command+0xf6>
     fb8:	10 e0       	ldi	r17, 0x00	; 0
     fba:	11 23       	and	r17, r17
     fbc:	61 f1       	breq	.+88     	; 0x1016 <lcd_wr_command+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fbe:	6a 81       	ldd	r22, Y+2	; 0x02
     fc0:	7b 81       	ldd	r23, Y+3	; 0x03
     fc2:	8c 81       	ldd	r24, Y+4	; 0x04
     fc4:	9d 81       	ldd	r25, Y+5	; 0x05
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e2       	ldi	r20, 0x20	; 32
     fcc:	51 e4       	ldi	r21, 0x41	; 65
     fce:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	bc 01       	movw	r22, r24
     fd8:	cd 01       	movw	r24, r26
     fda:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	9b 87       	std	Y+11, r25	; 0x0b
     fe4:	8a 87       	std	Y+10, r24	; 0x0a
     fe6:	12 c0       	rjmp	.+36     	; 0x100c <lcd_wr_command+0x148>
     fe8:	80 e7       	ldi	r24, 0x70	; 112
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	9d 87       	std	Y+13, r25	; 0x0d
     fee:	8c 87       	std	Y+12, r24	; 0x0c
     ff0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ff2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ff4:	8c 01       	movw	r16, r24
     ff6:	c8 01       	movw	r24, r16
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <lcd_wr_command+0x134>
     ffc:	8c 01       	movw	r16, r24
     ffe:	1d 87       	std	Y+13, r17	; 0x0d
    1000:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1002:	8a 85       	ldd	r24, Y+10	; 0x0a
    1004:	9b 85       	ldd	r25, Y+11	; 0x0b
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	9b 87       	std	Y+11, r25	; 0x0b
    100a:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    100c:	8a 85       	ldd	r24, Y+10	; 0x0a
    100e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	51 f7       	brne	.-44     	; 0xfe8 <lcd_wr_command+0x124>
    1014:	17 c0       	rjmp	.+46     	; 0x1044 <lcd_wr_command+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1016:	6e 81       	ldd	r22, Y+6	; 0x06
    1018:	7f 81       	ldd	r23, Y+7	; 0x07
    101a:	88 85       	ldd	r24, Y+8	; 0x08
    101c:	99 85       	ldd	r25, Y+9	; 0x09
    101e:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	9b 87       	std	Y+11, r25	; 0x0b
    1028:	8a 87       	std	Y+10, r24	; 0x0a
    102a:	8a 85       	ldd	r24, Y+10	; 0x0a
    102c:	9b 85       	ldd	r25, Y+11	; 0x0b
    102e:	9f 87       	std	Y+15, r25	; 0x0f
    1030:	8e 87       	std	Y+14, r24	; 0x0e
    1032:	8e 85       	ldd	r24, Y+14	; 0x0e
    1034:	9f 85       	ldd	r25, Y+15	; 0x0f
    1036:	8c 01       	movw	r16, r24
    1038:	f8 01       	movw	r30, r16
    103a:	31 97       	sbiw	r30, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <lcd_wr_command+0x176>
    103e:	8f 01       	movw	r16, r30
    1040:	1f 87       	std	Y+15, r17	; 0x0f
    1042:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
    1044:	88 e2       	ldi	r24, 0x28	; 40
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	28 e2       	ldi	r18, 0x28	; 40
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	f9 01       	movw	r30, r18
    104e:	20 81       	ld	r18, Z
    1050:	2b 7f       	andi	r18, 0xFB	; 251
    1052:	fc 01       	movw	r30, r24
    1054:	20 83       	st	Z, r18
	
	cmd = cmd & 0x0F;
    1056:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1058:	8f 70       	andi	r24, 0x0F	; 15
    105a:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    105c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    105e:	82 95       	swap	r24
    1060:	80 7f       	andi	r24, 0xF0	; 240
    1062:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1064:	88 e2       	ldi	r24, 0x28	; 40
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	28 e2       	ldi	r18, 0x28	; 40
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	f9 01       	movw	r30, r18
    106e:	20 81       	ld	r18, Z
    1070:	2f 70       	andi	r18, 0x0F	; 15
    1072:	fc 01       	movw	r30, r24
    1074:	20 83       	st	Z, r18
	lcd_port |= cmd;
    1076:	88 e2       	ldi	r24, 0x28	; 40
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	28 e2       	ldi	r18, 0x28	; 40
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	f9 01       	movw	r30, r18
    1080:	30 81       	ld	r19, Z
    1082:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1084:	23 2b       	or	r18, r19
    1086:	fc 01       	movw	r30, r24
    1088:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
    108a:	88 e2       	ldi	r24, 0x28	; 40
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	28 e2       	ldi	r18, 0x28	; 40
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	f9 01       	movw	r30, r18
    1094:	20 81       	ld	r18, Z
    1096:	2e 7f       	andi	r18, 0xFE	; 254
    1098:	fc 01       	movw	r30, r24
    109a:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    109c:	88 e2       	ldi	r24, 0x28	; 40
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	28 e2       	ldi	r18, 0x28	; 40
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	f9 01       	movw	r30, r18
    10a6:	20 81       	ld	r18, Z
    10a8:	2d 7f       	andi	r18, 0xFD	; 253
    10aa:	fc 01       	movw	r30, r24
    10ac:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    10ae:	88 e2       	ldi	r24, 0x28	; 40
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	28 e2       	ldi	r18, 0x28	; 40
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	f9 01       	movw	r30, r18
    10b8:	20 81       	ld	r18, Z
    10ba:	24 60       	ori	r18, 0x04	; 4
    10bc:	fc 01       	movw	r30, r24
    10be:	20 83       	st	Z, r18
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	a0 ea       	ldi	r26, 0xA0	; 160
    10c6:	b0 e4       	ldi	r27, 0x40	; 64
    10c8:	88 8b       	std	Y+16, r24	; 0x10
    10ca:	99 8b       	std	Y+17, r25	; 0x11
    10cc:	aa 8b       	std	Y+18, r26	; 0x12
    10ce:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    10d0:	68 89       	ldd	r22, Y+16	; 0x10
    10d2:	79 89       	ldd	r23, Y+17	; 0x11
    10d4:	8a 89       	ldd	r24, Y+18	; 0x12
    10d6:	9b 89       	ldd	r25, Y+19	; 0x13
    10d8:	26 e6       	ldi	r18, 0x66	; 102
    10da:	36 e6       	ldi	r19, 0x66	; 102
    10dc:	46 e6       	ldi	r20, 0x66	; 102
    10de:	55 e4       	ldi	r21, 0x45	; 69
    10e0:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	8c 8b       	std	Y+20, r24	; 0x14
    10ea:	9d 8b       	std	Y+21, r25	; 0x15
    10ec:	ae 8b       	std	Y+22, r26	; 0x16
    10ee:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    10f0:	11 e0       	ldi	r17, 0x01	; 1
    10f2:	6c 89       	ldd	r22, Y+20	; 0x14
    10f4:	7d 89       	ldd	r23, Y+21	; 0x15
    10f6:	8e 89       	ldd	r24, Y+22	; 0x16
    10f8:	9f 89       	ldd	r25, Y+23	; 0x17
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e8       	ldi	r20, 0x80	; 128
    1100:	5f e3       	ldi	r21, 0x3F	; 63
    1102:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__cmpsf2>
    1106:	88 23       	and	r24, r24
    1108:	0c f0       	brlt	.+2      	; 0x110c <lcd_wr_command+0x248>
    110a:	10 e0       	ldi	r17, 0x00	; 0
    110c:	11 23       	and	r17, r17
    110e:	29 f0       	breq	.+10     	; 0x111a <lcd_wr_command+0x256>
		__ticks = 1;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	99 8f       	std	Y+25, r25	; 0x19
    1116:	88 8f       	std	Y+24, r24	; 0x18
    1118:	46 c0       	rjmp	.+140    	; 0x11a6 <lcd_wr_command+0x2e2>
	else if (__tmp > 65535)
    111a:	11 e0       	ldi	r17, 0x01	; 1
    111c:	6c 89       	ldd	r22, Y+20	; 0x14
    111e:	7d 89       	ldd	r23, Y+21	; 0x15
    1120:	8e 89       	ldd	r24, Y+22	; 0x16
    1122:	9f 89       	ldd	r25, Y+23	; 0x17
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	3f ef       	ldi	r19, 0xFF	; 255
    1128:	4f e7       	ldi	r20, 0x7F	; 127
    112a:	57 e4       	ldi	r21, 0x47	; 71
    112c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__gesf2>
    1130:	18 16       	cp	r1, r24
    1132:	0c f0       	brlt	.+2      	; 0x1136 <lcd_wr_command+0x272>
    1134:	10 e0       	ldi	r17, 0x00	; 0
    1136:	11 23       	and	r17, r17
    1138:	61 f1       	breq	.+88     	; 0x1192 <lcd_wr_command+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    113a:	68 89       	ldd	r22, Y+16	; 0x10
    113c:	79 89       	ldd	r23, Y+17	; 0x11
    113e:	8a 89       	ldd	r24, Y+18	; 0x12
    1140:	9b 89       	ldd	r25, Y+19	; 0x13
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 e2       	ldi	r20, 0x20	; 32
    1148:	51 e4       	ldi	r21, 0x41	; 65
    114a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	bc 01       	movw	r22, r24
    1154:	cd 01       	movw	r24, r26
    1156:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	99 8f       	std	Y+25, r25	; 0x19
    1160:	88 8f       	std	Y+24, r24	; 0x18
    1162:	12 c0       	rjmp	.+36     	; 0x1188 <lcd_wr_command+0x2c4>
    1164:	80 e7       	ldi	r24, 0x70	; 112
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	9b 8f       	std	Y+27, r25	; 0x1b
    116a:	8a 8f       	std	Y+26, r24	; 0x1a
    116c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    116e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1170:	8c 01       	movw	r16, r24
    1172:	c8 01       	movw	r24, r16
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	f1 f7       	brne	.-4      	; 0x1174 <lcd_wr_command+0x2b0>
    1178:	8c 01       	movw	r16, r24
    117a:	1b 8f       	std	Y+27, r17	; 0x1b
    117c:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117e:	88 8d       	ldd	r24, Y+24	; 0x18
    1180:	99 8d       	ldd	r25, Y+25	; 0x19
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	99 8f       	std	Y+25, r25	; 0x19
    1186:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1188:	88 8d       	ldd	r24, Y+24	; 0x18
    118a:	99 8d       	ldd	r25, Y+25	; 0x19
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	51 f7       	brne	.-44     	; 0x1164 <lcd_wr_command+0x2a0>
    1190:	17 c0       	rjmp	.+46     	; 0x11c0 <lcd_wr_command+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1192:	6c 89       	ldd	r22, Y+20	; 0x14
    1194:	7d 89       	ldd	r23, Y+21	; 0x15
    1196:	8e 89       	ldd	r24, Y+22	; 0x16
    1198:	9f 89       	ldd	r25, Y+23	; 0x17
    119a:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	99 8f       	std	Y+25, r25	; 0x19
    11a4:	88 8f       	std	Y+24, r24	; 0x18
    11a6:	88 8d       	ldd	r24, Y+24	; 0x18
    11a8:	99 8d       	ldd	r25, Y+25	; 0x19
    11aa:	9d 8f       	std	Y+29, r25	; 0x1d
    11ac:	8c 8f       	std	Y+28, r24	; 0x1c
    11ae:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11b0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    11b2:	8c 01       	movw	r16, r24
    11b4:	f8 01       	movw	r30, r16
    11b6:	31 97       	sbiw	r30, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <lcd_wr_command+0x2f2>
    11ba:	8f 01       	movw	r16, r30
    11bc:	1d 8f       	std	Y+29, r17	; 0x1d
    11be:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    11c0:	88 e2       	ldi	r24, 0x28	; 40
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	28 e2       	ldi	r18, 0x28	; 40
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	f9 01       	movw	r30, r18
    11ca:	20 81       	ld	r18, Z
    11cc:	2b 7f       	andi	r18, 0xFB	; 251
    11ce:	fc 01       	movw	r30, r24
    11d0:	20 83       	st	Z, r18
}
    11d2:	6e 96       	adiw	r28, 0x1e	; 30
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	08 95       	ret

000011e8 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	6e 97       	sbiw	r28, 0x1e	; 30
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    1202:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1204:	89 83       	std	Y+1, r24	; 0x01
	temp = (temp & 0xF0);
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	80 7f       	andi	r24, 0xF0	; 240
    120a:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
    120c:	88 e2       	ldi	r24, 0x28	; 40
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	28 e2       	ldi	r18, 0x28	; 40
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	f9 01       	movw	r30, r18
    1216:	20 81       	ld	r18, Z
    1218:	2f 70       	andi	r18, 0x0F	; 15
    121a:	fc 01       	movw	r30, r24
    121c:	20 83       	st	Z, r18
	lcd_port |= temp;
    121e:	88 e2       	ldi	r24, 0x28	; 40
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	28 e2       	ldi	r18, 0x28	; 40
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	f9 01       	movw	r30, r18
    1228:	30 81       	ld	r19, Z
    122a:	29 81       	ldd	r18, Y+1	; 0x01
    122c:	23 2b       	or	r18, r19
    122e:	fc 01       	movw	r30, r24
    1230:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    1232:	88 e2       	ldi	r24, 0x28	; 40
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	28 e2       	ldi	r18, 0x28	; 40
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	f9 01       	movw	r30, r18
    123c:	20 81       	ld	r18, Z
    123e:	21 60       	ori	r18, 0x01	; 1
    1240:	fc 01       	movw	r30, r24
    1242:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    1244:	88 e2       	ldi	r24, 0x28	; 40
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	28 e2       	ldi	r18, 0x28	; 40
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	f9 01       	movw	r30, r18
    124e:	20 81       	ld	r18, Z
    1250:	2d 7f       	andi	r18, 0xFD	; 253
    1252:	fc 01       	movw	r30, r24
    1254:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    1256:	88 e2       	ldi	r24, 0x28	; 40
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	28 e2       	ldi	r18, 0x28	; 40
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	f9 01       	movw	r30, r18
    1260:	20 81       	ld	r18, Z
    1262:	24 60       	ori	r18, 0x04	; 4
    1264:	fc 01       	movw	r30, r24
    1266:	20 83       	st	Z, r18
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	a0 ea       	ldi	r26, 0xA0	; 160
    126e:	b0 e4       	ldi	r27, 0x40	; 64
    1270:	8a 83       	std	Y+2, r24	; 0x02
    1272:	9b 83       	std	Y+3, r25	; 0x03
    1274:	ac 83       	std	Y+4, r26	; 0x04
    1276:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1278:	6a 81       	ldd	r22, Y+2	; 0x02
    127a:	7b 81       	ldd	r23, Y+3	; 0x03
    127c:	8c 81       	ldd	r24, Y+4	; 0x04
    127e:	9d 81       	ldd	r25, Y+5	; 0x05
    1280:	26 e6       	ldi	r18, 0x66	; 102
    1282:	36 e6       	ldi	r19, 0x66	; 102
    1284:	46 e6       	ldi	r20, 0x66	; 102
    1286:	55 e4       	ldi	r21, 0x45	; 69
    1288:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	8e 83       	std	Y+6, r24	; 0x06
    1292:	9f 83       	std	Y+7, r25	; 0x07
    1294:	a8 87       	std	Y+8, r26	; 0x08
    1296:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1298:	11 e0       	ldi	r17, 0x01	; 1
    129a:	6e 81       	ldd	r22, Y+6	; 0x06
    129c:	7f 81       	ldd	r23, Y+7	; 0x07
    129e:	88 85       	ldd	r24, Y+8	; 0x08
    12a0:	99 85       	ldd	r25, Y+9	; 0x09
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 e8       	ldi	r20, 0x80	; 128
    12a8:	5f e3       	ldi	r21, 0x3F	; 63
    12aa:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__cmpsf2>
    12ae:	88 23       	and	r24, r24
    12b0:	0c f0       	brlt	.+2      	; 0x12b4 <lcd_wr_char+0xcc>
    12b2:	10 e0       	ldi	r17, 0x00	; 0
    12b4:	11 23       	and	r17, r17
    12b6:	29 f0       	breq	.+10     	; 0x12c2 <lcd_wr_char+0xda>
		__ticks = 1;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	9b 87       	std	Y+11, r25	; 0x0b
    12be:	8a 87       	std	Y+10, r24	; 0x0a
    12c0:	46 c0       	rjmp	.+140    	; 0x134e <lcd_wr_char+0x166>
	else if (__tmp > 65535)
    12c2:	11 e0       	ldi	r17, 0x01	; 1
    12c4:	6e 81       	ldd	r22, Y+6	; 0x06
    12c6:	7f 81       	ldd	r23, Y+7	; 0x07
    12c8:	88 85       	ldd	r24, Y+8	; 0x08
    12ca:	99 85       	ldd	r25, Y+9	; 0x09
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	3f ef       	ldi	r19, 0xFF	; 255
    12d0:	4f e7       	ldi	r20, 0x7F	; 127
    12d2:	57 e4       	ldi	r21, 0x47	; 71
    12d4:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__gesf2>
    12d8:	18 16       	cp	r1, r24
    12da:	0c f0       	brlt	.+2      	; 0x12de <lcd_wr_char+0xf6>
    12dc:	10 e0       	ldi	r17, 0x00	; 0
    12de:	11 23       	and	r17, r17
    12e0:	61 f1       	breq	.+88     	; 0x133a <lcd_wr_char+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e2:	6a 81       	ldd	r22, Y+2	; 0x02
    12e4:	7b 81       	ldd	r23, Y+3	; 0x03
    12e6:	8c 81       	ldd	r24, Y+4	; 0x04
    12e8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e2       	ldi	r20, 0x20	; 32
    12f0:	51 e4       	ldi	r21, 0x41	; 65
    12f2:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	bc 01       	movw	r22, r24
    12fc:	cd 01       	movw	r24, r26
    12fe:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	9b 87       	std	Y+11, r25	; 0x0b
    1308:	8a 87       	std	Y+10, r24	; 0x0a
    130a:	12 c0       	rjmp	.+36     	; 0x1330 <lcd_wr_char+0x148>
    130c:	80 e7       	ldi	r24, 0x70	; 112
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	9d 87       	std	Y+13, r25	; 0x0d
    1312:	8c 87       	std	Y+12, r24	; 0x0c
    1314:	8c 85       	ldd	r24, Y+12	; 0x0c
    1316:	9d 85       	ldd	r25, Y+13	; 0x0d
    1318:	8c 01       	movw	r16, r24
    131a:	c8 01       	movw	r24, r16
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	f1 f7       	brne	.-4      	; 0x131c <lcd_wr_char+0x134>
    1320:	8c 01       	movw	r16, r24
    1322:	1d 87       	std	Y+13, r17	; 0x0d
    1324:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1326:	8a 85       	ldd	r24, Y+10	; 0x0a
    1328:	9b 85       	ldd	r25, Y+11	; 0x0b
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	9b 87       	std	Y+11, r25	; 0x0b
    132e:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1330:	8a 85       	ldd	r24, Y+10	; 0x0a
    1332:	9b 85       	ldd	r25, Y+11	; 0x0b
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	51 f7       	brne	.-44     	; 0x130c <lcd_wr_char+0x124>
    1338:	17 c0       	rjmp	.+46     	; 0x1368 <lcd_wr_char+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133a:	6e 81       	ldd	r22, Y+6	; 0x06
    133c:	7f 81       	ldd	r23, Y+7	; 0x07
    133e:	88 85       	ldd	r24, Y+8	; 0x08
    1340:	99 85       	ldd	r25, Y+9	; 0x09
    1342:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	9b 87       	std	Y+11, r25	; 0x0b
    134c:	8a 87       	std	Y+10, r24	; 0x0a
    134e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1350:	9b 85       	ldd	r25, Y+11	; 0x0b
    1352:	9f 87       	std	Y+15, r25	; 0x0f
    1354:	8e 87       	std	Y+14, r24	; 0x0e
    1356:	8e 85       	ldd	r24, Y+14	; 0x0e
    1358:	9f 85       	ldd	r25, Y+15	; 0x0f
    135a:	8c 01       	movw	r16, r24
    135c:	f8 01       	movw	r30, r16
    135e:	31 97       	sbiw	r30, 0x01	; 1
    1360:	f1 f7       	brne	.-4      	; 0x135e <lcd_wr_char+0x176>
    1362:	8f 01       	movw	r16, r30
    1364:	1f 87       	std	Y+15, r17	; 0x0f
    1366:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
    1368:	88 e2       	ldi	r24, 0x28	; 40
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	28 e2       	ldi	r18, 0x28	; 40
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	f9 01       	movw	r30, r18
    1372:	20 81       	ld	r18, Z
    1374:	2b 7f       	andi	r18, 0xFB	; 251
    1376:	fc 01       	movw	r30, r24
    1378:	20 83       	st	Z, r18

	letter = letter & 0x0F;
    137a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    137c:	8f 70       	andi	r24, 0x0F	; 15
    137e:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1380:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1382:	82 95       	swap	r24
    1384:	80 7f       	andi	r24, 0xF0	; 240
    1386:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1388:	88 e2       	ldi	r24, 0x28	; 40
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	28 e2       	ldi	r18, 0x28	; 40
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	f9 01       	movw	r30, r18
    1392:	20 81       	ld	r18, Z
    1394:	2f 70       	andi	r18, 0x0F	; 15
    1396:	fc 01       	movw	r30, r24
    1398:	20 83       	st	Z, r18
	lcd_port |= letter;
    139a:	88 e2       	ldi	r24, 0x28	; 40
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	28 e2       	ldi	r18, 0x28	; 40
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	f9 01       	movw	r30, r18
    13a4:	30 81       	ld	r19, Z
    13a6:	2e 8d       	ldd	r18, Y+30	; 0x1e
    13a8:	23 2b       	or	r18, r19
    13aa:	fc 01       	movw	r30, r24
    13ac:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    13ae:	88 e2       	ldi	r24, 0x28	; 40
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	28 e2       	ldi	r18, 0x28	; 40
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	f9 01       	movw	r30, r18
    13b8:	20 81       	ld	r18, Z
    13ba:	21 60       	ori	r18, 0x01	; 1
    13bc:	fc 01       	movw	r30, r24
    13be:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    13c0:	88 e2       	ldi	r24, 0x28	; 40
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	28 e2       	ldi	r18, 0x28	; 40
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	f9 01       	movw	r30, r18
    13ca:	20 81       	ld	r18, Z
    13cc:	2d 7f       	andi	r18, 0xFD	; 253
    13ce:	fc 01       	movw	r30, r24
    13d0:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    13d2:	88 e2       	ldi	r24, 0x28	; 40
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	28 e2       	ldi	r18, 0x28	; 40
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	f9 01       	movw	r30, r18
    13dc:	20 81       	ld	r18, Z
    13de:	24 60       	ori	r18, 0x04	; 4
    13e0:	fc 01       	movw	r30, r24
    13e2:	20 83       	st	Z, r18
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a0 ea       	ldi	r26, 0xA0	; 160
    13ea:	b0 e4       	ldi	r27, 0x40	; 64
    13ec:	88 8b       	std	Y+16, r24	; 0x10
    13ee:	99 8b       	std	Y+17, r25	; 0x11
    13f0:	aa 8b       	std	Y+18, r26	; 0x12
    13f2:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    13f4:	68 89       	ldd	r22, Y+16	; 0x10
    13f6:	79 89       	ldd	r23, Y+17	; 0x11
    13f8:	8a 89       	ldd	r24, Y+18	; 0x12
    13fa:	9b 89       	ldd	r25, Y+19	; 0x13
    13fc:	26 e6       	ldi	r18, 0x66	; 102
    13fe:	36 e6       	ldi	r19, 0x66	; 102
    1400:	46 e6       	ldi	r20, 0x66	; 102
    1402:	55 e4       	ldi	r21, 0x45	; 69
    1404:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	8c 8b       	std	Y+20, r24	; 0x14
    140e:	9d 8b       	std	Y+21, r25	; 0x15
    1410:	ae 8b       	std	Y+22, r26	; 0x16
    1412:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    1414:	11 e0       	ldi	r17, 0x01	; 1
    1416:	6c 89       	ldd	r22, Y+20	; 0x14
    1418:	7d 89       	ldd	r23, Y+21	; 0x15
    141a:	8e 89       	ldd	r24, Y+22	; 0x16
    141c:	9f 89       	ldd	r25, Y+23	; 0x17
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e8       	ldi	r20, 0x80	; 128
    1424:	5f e3       	ldi	r21, 0x3F	; 63
    1426:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__cmpsf2>
    142a:	88 23       	and	r24, r24
    142c:	0c f0       	brlt	.+2      	; 0x1430 <lcd_wr_char+0x248>
    142e:	10 e0       	ldi	r17, 0x00	; 0
    1430:	11 23       	and	r17, r17
    1432:	29 f0       	breq	.+10     	; 0x143e <lcd_wr_char+0x256>
		__ticks = 1;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	99 8f       	std	Y+25, r25	; 0x19
    143a:	88 8f       	std	Y+24, r24	; 0x18
    143c:	46 c0       	rjmp	.+140    	; 0x14ca <lcd_wr_char+0x2e2>
	else if (__tmp > 65535)
    143e:	11 e0       	ldi	r17, 0x01	; 1
    1440:	6c 89       	ldd	r22, Y+20	; 0x14
    1442:	7d 89       	ldd	r23, Y+21	; 0x15
    1444:	8e 89       	ldd	r24, Y+22	; 0x16
    1446:	9f 89       	ldd	r25, Y+23	; 0x17
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	3f ef       	ldi	r19, 0xFF	; 255
    144c:	4f e7       	ldi	r20, 0x7F	; 127
    144e:	57 e4       	ldi	r21, 0x47	; 71
    1450:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__gesf2>
    1454:	18 16       	cp	r1, r24
    1456:	0c f0       	brlt	.+2      	; 0x145a <lcd_wr_char+0x272>
    1458:	10 e0       	ldi	r17, 0x00	; 0
    145a:	11 23       	and	r17, r17
    145c:	61 f1       	breq	.+88     	; 0x14b6 <lcd_wr_char+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145e:	68 89       	ldd	r22, Y+16	; 0x10
    1460:	79 89       	ldd	r23, Y+17	; 0x11
    1462:	8a 89       	ldd	r24, Y+18	; 0x12
    1464:	9b 89       	ldd	r25, Y+19	; 0x13
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e2       	ldi	r20, 0x20	; 32
    146c:	51 e4       	ldi	r21, 0x41	; 65
    146e:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	bc 01       	movw	r22, r24
    1478:	cd 01       	movw	r24, r26
    147a:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	99 8f       	std	Y+25, r25	; 0x19
    1484:	88 8f       	std	Y+24, r24	; 0x18
    1486:	12 c0       	rjmp	.+36     	; 0x14ac <lcd_wr_char+0x2c4>
    1488:	80 e7       	ldi	r24, 0x70	; 112
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	9b 8f       	std	Y+27, r25	; 0x1b
    148e:	8a 8f       	std	Y+26, r24	; 0x1a
    1490:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1492:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1494:	8c 01       	movw	r16, r24
    1496:	c8 01       	movw	r24, r16
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	f1 f7       	brne	.-4      	; 0x1498 <lcd_wr_char+0x2b0>
    149c:	8c 01       	movw	r16, r24
    149e:	1b 8f       	std	Y+27, r17	; 0x1b
    14a0:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a2:	88 8d       	ldd	r24, Y+24	; 0x18
    14a4:	99 8d       	ldd	r25, Y+25	; 0x19
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	99 8f       	std	Y+25, r25	; 0x19
    14aa:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ac:	88 8d       	ldd	r24, Y+24	; 0x18
    14ae:	99 8d       	ldd	r25, Y+25	; 0x19
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	51 f7       	brne	.-44     	; 0x1488 <lcd_wr_char+0x2a0>
    14b4:	17 c0       	rjmp	.+46     	; 0x14e4 <lcd_wr_char+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b6:	6c 89       	ldd	r22, Y+20	; 0x14
    14b8:	7d 89       	ldd	r23, Y+21	; 0x15
    14ba:	8e 89       	ldd	r24, Y+22	; 0x16
    14bc:	9f 89       	ldd	r25, Y+23	; 0x17
    14be:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	99 8f       	std	Y+25, r25	; 0x19
    14c8:	88 8f       	std	Y+24, r24	; 0x18
    14ca:	88 8d       	ldd	r24, Y+24	; 0x18
    14cc:	99 8d       	ldd	r25, Y+25	; 0x19
    14ce:	9d 8f       	std	Y+29, r25	; 0x1d
    14d0:	8c 8f       	std	Y+28, r24	; 0x1c
    14d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    14d4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    14d6:	8c 01       	movw	r16, r24
    14d8:	f8 01       	movw	r30, r16
    14da:	31 97       	sbiw	r30, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <lcd_wr_char+0x2f2>
    14de:	8f 01       	movw	r16, r30
    14e0:	1d 8f       	std	Y+29, r17	; 0x1d
    14e2:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    14e4:	88 e2       	ldi	r24, 0x28	; 40
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	28 e2       	ldi	r18, 0x28	; 40
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	f9 01       	movw	r30, r18
    14ee:	20 81       	ld	r18, Z
    14f0:	2b 7f       	andi	r18, 0xFB	; 251
    14f2:	fc 01       	movw	r30, r24
    14f4:	20 83       	st	Z, r18
}
    14f6:	6e 96       	adiw	r28, 0x1e	; 30
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	08 95       	ret

0000150c <uart2_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
 UCSR2B = 0x00; //disable while setting baud rate
    1514:	81 ed       	ldi	r24, 0xD1	; 209
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	fc 01       	movw	r30, r24
    151a:	10 82       	st	Z, r1
 UCSR2A = 0x00;
    151c:	80 ed       	ldi	r24, 0xD0	; 208
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	fc 01       	movw	r30, r24
    1522:	10 82       	st	Z, r1
 UCSR2C = 0x06;
    1524:	82 ed       	ldi	r24, 0xD2	; 210
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	26 e0       	ldi	r18, 0x06	; 6
    152a:	fc 01       	movw	r30, r24
    152c:	20 83       	st	Z, r18
 UBRR2L = 0x5F; //set baud rate lo
    152e:	84 ed       	ldi	r24, 0xD4	; 212
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	2f e5       	ldi	r18, 0x5F	; 95
    1534:	fc 01       	movw	r30, r24
    1536:	20 83       	st	Z, r18
 UBRR2H = 0x00; //set baud rate hi
    1538:	85 ed       	ldi	r24, 0xD5	; 213
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	fc 01       	movw	r30, r24
    153e:	10 82       	st	Z, r1
 UCSR2B = 0x98;
    1540:	81 ed       	ldi	r24, 0xD1	; 209
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	28 e9       	ldi	r18, 0x98	; 152
    1546:	fc 01       	movw	r30, r24
    1548:	20 83       	st	Z, r18
}
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	08 95       	ret

00001550 <__vector_51>:


SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
{
    1550:	1f 92       	push	r1
    1552:	0f 92       	push	r0
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	0f 92       	push	r0
    1558:	00 90 5b 00 	lds	r0, 0x005B
    155c:	0f 92       	push	r0
    155e:	11 24       	eor	r1, r1
    1560:	2f 93       	push	r18
    1562:	3f 93       	push	r19
    1564:	4f 93       	push	r20
    1566:	5f 93       	push	r21
    1568:	6f 93       	push	r22
    156a:	7f 93       	push	r23
    156c:	8f 93       	push	r24
    156e:	9f 93       	push	r25
    1570:	af 93       	push	r26
    1572:	bf 93       	push	r27
    1574:	ef 93       	push	r30
    1576:	ff 93       	push	r31
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
	data = UDR2; 				//making copy of data from UDR2 in 'data' variable 
    1580:	86 ed       	ldi	r24, 0xD6	; 214
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	fc 01       	movw	r30, r24
    1586:	80 81       	ld	r24, Z
    1588:	80 93 00 02 	sts	0x0200, r24

	UDR2 = data; 				//echo data back to PC
    158c:	86 ed       	ldi	r24, 0xD6	; 214
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	20 91 00 02 	lds	r18, 0x0200
    1594:	fc 01       	movw	r30, r24
    1596:	20 83       	st	Z, r18
	lcd_wr_char(data);
    1598:	80 91 00 02 	lds	r24, 0x0200
    159c:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <lcd_wr_char>
		
}
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	ff 91       	pop	r31
    15a6:	ef 91       	pop	r30
    15a8:	bf 91       	pop	r27
    15aa:	af 91       	pop	r26
    15ac:	9f 91       	pop	r25
    15ae:	8f 91       	pop	r24
    15b0:	7f 91       	pop	r23
    15b2:	6f 91       	pop	r22
    15b4:	5f 91       	pop	r21
    15b6:	4f 91       	pop	r20
    15b8:	3f 91       	pop	r19
    15ba:	2f 91       	pop	r18
    15bc:	0f 90       	pop	r0
    15be:	00 92 5b 00 	sts	0x005B, r0
    15c2:	0f 90       	pop	r0
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	0f 90       	pop	r0
    15c8:	1f 90       	pop	r1
    15ca:	18 95       	reti

000015cc <init_devices>:


//Function To Initialize all The Devices
void init_devices()
{
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    15d4:	f8 94       	cli
 port_init();  //Initializes all the ports
    15d6:	0e 94 ae 00 	call	0x15c	; 0x15c <port_init>
 uart2_init(); //Initailize UART1 for serial communiaction
    15da:	0e 94 86 0a 	call	0x150c	; 0x150c <uart2_init>
 sei();   //Enables the global interrupts
    15de:	78 94       	sei
}
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	08 95       	ret

000015e6 <main>:

//Main Function
int main(void)
{
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
	init_devices();
    15ee:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <init_devices>
	
	lcd_set_4bit();
    15f2:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_set_4bit>
	lcd_init();
    15f6:	0e 94 ad 06 	call	0xd5a	; 0xd5a <lcd_init>
	
	while(1);
    15fa:	ff cf       	rjmp	.-2      	; 0x15fa <main+0x14>

000015fc <__cmpsf2>:
    15fc:	2f d0       	rcall	.+94     	; 0x165c <__fp_cmp>
    15fe:	08 f4       	brcc	.+2      	; 0x1602 <__cmpsf2+0x6>
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	08 95       	ret

00001604 <__fixunssfsi>:
    1604:	57 d0       	rcall	.+174    	; 0x16b4 <__fp_splitA>
    1606:	88 f0       	brcs	.+34     	; 0x162a <__fixunssfsi+0x26>
    1608:	9f 57       	subi	r25, 0x7F	; 127
    160a:	90 f0       	brcs	.+36     	; 0x1630 <__fixunssfsi+0x2c>
    160c:	b9 2f       	mov	r27, r25
    160e:	99 27       	eor	r25, r25
    1610:	b7 51       	subi	r27, 0x17	; 23
    1612:	a0 f0       	brcs	.+40     	; 0x163c <__fixunssfsi+0x38>
    1614:	d1 f0       	breq	.+52     	; 0x164a <__fixunssfsi+0x46>
    1616:	66 0f       	add	r22, r22
    1618:	77 1f       	adc	r23, r23
    161a:	88 1f       	adc	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	1a f0       	brmi	.+6      	; 0x1626 <__fixunssfsi+0x22>
    1620:	ba 95       	dec	r27
    1622:	c9 f7       	brne	.-14     	; 0x1616 <__fixunssfsi+0x12>
    1624:	12 c0       	rjmp	.+36     	; 0x164a <__fixunssfsi+0x46>
    1626:	b1 30       	cpi	r27, 0x01	; 1
    1628:	81 f0       	breq	.+32     	; 0x164a <__fixunssfsi+0x46>
    162a:	5e d0       	rcall	.+188    	; 0x16e8 <__fp_zero>
    162c:	b1 e0       	ldi	r27, 0x01	; 1
    162e:	08 95       	ret
    1630:	5b c0       	rjmp	.+182    	; 0x16e8 <__fp_zero>
    1632:	67 2f       	mov	r22, r23
    1634:	78 2f       	mov	r23, r24
    1636:	88 27       	eor	r24, r24
    1638:	b8 5f       	subi	r27, 0xF8	; 248
    163a:	39 f0       	breq	.+14     	; 0x164a <__fixunssfsi+0x46>
    163c:	b9 3f       	cpi	r27, 0xF9	; 249
    163e:	cc f3       	brlt	.-14     	; 0x1632 <__fixunssfsi+0x2e>
    1640:	86 95       	lsr	r24
    1642:	77 95       	ror	r23
    1644:	67 95       	ror	r22
    1646:	b3 95       	inc	r27
    1648:	d9 f7       	brne	.-10     	; 0x1640 <__fixunssfsi+0x3c>
    164a:	3e f4       	brtc	.+14     	; 0x165a <__fixunssfsi+0x56>
    164c:	90 95       	com	r25
    164e:	80 95       	com	r24
    1650:	70 95       	com	r23
    1652:	61 95       	neg	r22
    1654:	7f 4f       	sbci	r23, 0xFF	; 255
    1656:	8f 4f       	sbci	r24, 0xFF	; 255
    1658:	9f 4f       	sbci	r25, 0xFF	; 255
    165a:	08 95       	ret

0000165c <__fp_cmp>:
    165c:	99 0f       	add	r25, r25
    165e:	00 08       	sbc	r0, r0
    1660:	55 0f       	add	r21, r21
    1662:	aa 0b       	sbc	r26, r26
    1664:	e0 e8       	ldi	r30, 0x80	; 128
    1666:	fe ef       	ldi	r31, 0xFE	; 254
    1668:	16 16       	cp	r1, r22
    166a:	17 06       	cpc	r1, r23
    166c:	e8 07       	cpc	r30, r24
    166e:	f9 07       	cpc	r31, r25
    1670:	c0 f0       	brcs	.+48     	; 0x16a2 <__fp_cmp+0x46>
    1672:	12 16       	cp	r1, r18
    1674:	13 06       	cpc	r1, r19
    1676:	e4 07       	cpc	r30, r20
    1678:	f5 07       	cpc	r31, r21
    167a:	98 f0       	brcs	.+38     	; 0x16a2 <__fp_cmp+0x46>
    167c:	62 1b       	sub	r22, r18
    167e:	73 0b       	sbc	r23, r19
    1680:	84 0b       	sbc	r24, r20
    1682:	95 0b       	sbc	r25, r21
    1684:	39 f4       	brne	.+14     	; 0x1694 <__fp_cmp+0x38>
    1686:	0a 26       	eor	r0, r26
    1688:	61 f0       	breq	.+24     	; 0x16a2 <__fp_cmp+0x46>
    168a:	23 2b       	or	r18, r19
    168c:	24 2b       	or	r18, r20
    168e:	25 2b       	or	r18, r21
    1690:	21 f4       	brne	.+8      	; 0x169a <__fp_cmp+0x3e>
    1692:	08 95       	ret
    1694:	0a 26       	eor	r0, r26
    1696:	09 f4       	brne	.+2      	; 0x169a <__fp_cmp+0x3e>
    1698:	a1 40       	sbci	r26, 0x01	; 1
    169a:	a6 95       	lsr	r26
    169c:	8f ef       	ldi	r24, 0xFF	; 255
    169e:	81 1d       	adc	r24, r1
    16a0:	81 1d       	adc	r24, r1
    16a2:	08 95       	ret

000016a4 <__fp_split3>:
    16a4:	57 fd       	sbrc	r21, 7
    16a6:	90 58       	subi	r25, 0x80	; 128
    16a8:	44 0f       	add	r20, r20
    16aa:	55 1f       	adc	r21, r21
    16ac:	59 f0       	breq	.+22     	; 0x16c4 <__fp_splitA+0x10>
    16ae:	5f 3f       	cpi	r21, 0xFF	; 255
    16b0:	71 f0       	breq	.+28     	; 0x16ce <__fp_splitA+0x1a>
    16b2:	47 95       	ror	r20

000016b4 <__fp_splitA>:
    16b4:	88 0f       	add	r24, r24
    16b6:	97 fb       	bst	r25, 7
    16b8:	99 1f       	adc	r25, r25
    16ba:	61 f0       	breq	.+24     	; 0x16d4 <__fp_splitA+0x20>
    16bc:	9f 3f       	cpi	r25, 0xFF	; 255
    16be:	79 f0       	breq	.+30     	; 0x16de <__fp_splitA+0x2a>
    16c0:	87 95       	ror	r24
    16c2:	08 95       	ret
    16c4:	12 16       	cp	r1, r18
    16c6:	13 06       	cpc	r1, r19
    16c8:	14 06       	cpc	r1, r20
    16ca:	55 1f       	adc	r21, r21
    16cc:	f2 cf       	rjmp	.-28     	; 0x16b2 <__fp_split3+0xe>
    16ce:	46 95       	lsr	r20
    16d0:	f1 df       	rcall	.-30     	; 0x16b4 <__fp_splitA>
    16d2:	08 c0       	rjmp	.+16     	; 0x16e4 <__fp_splitA+0x30>
    16d4:	16 16       	cp	r1, r22
    16d6:	17 06       	cpc	r1, r23
    16d8:	18 06       	cpc	r1, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	f1 cf       	rjmp	.-30     	; 0x16c0 <__fp_splitA+0xc>
    16de:	86 95       	lsr	r24
    16e0:	71 05       	cpc	r23, r1
    16e2:	61 05       	cpc	r22, r1
    16e4:	08 94       	sec
    16e6:	08 95       	ret

000016e8 <__fp_zero>:
    16e8:	e8 94       	clt

000016ea <__fp_szero>:
    16ea:	bb 27       	eor	r27, r27
    16ec:	66 27       	eor	r22, r22
    16ee:	77 27       	eor	r23, r23
    16f0:	cb 01       	movw	r24, r22
    16f2:	97 f9       	bld	r25, 7
    16f4:	08 95       	ret

000016f6 <__gesf2>:
    16f6:	b2 df       	rcall	.-156    	; 0x165c <__fp_cmp>
    16f8:	08 f4       	brcc	.+2      	; 0x16fc <__gesf2+0x6>
    16fa:	8f ef       	ldi	r24, 0xFF	; 255
    16fc:	08 95       	ret

000016fe <__mulsf3>:
    16fe:	0b d0       	rcall	.+22     	; 0x1716 <__mulsf3x>
    1700:	78 c0       	rjmp	.+240    	; 0x17f2 <__fp_round>
    1702:	69 d0       	rcall	.+210    	; 0x17d6 <__fp_pscA>
    1704:	28 f0       	brcs	.+10     	; 0x1710 <__mulsf3+0x12>
    1706:	6e d0       	rcall	.+220    	; 0x17e4 <__fp_pscB>
    1708:	18 f0       	brcs	.+6      	; 0x1710 <__mulsf3+0x12>
    170a:	95 23       	and	r25, r21
    170c:	09 f0       	breq	.+2      	; 0x1710 <__mulsf3+0x12>
    170e:	5a c0       	rjmp	.+180    	; 0x17c4 <__fp_inf>
    1710:	5f c0       	rjmp	.+190    	; 0x17d0 <__fp_nan>
    1712:	11 24       	eor	r1, r1
    1714:	ea cf       	rjmp	.-44     	; 0x16ea <__fp_szero>

00001716 <__mulsf3x>:
    1716:	c6 df       	rcall	.-116    	; 0x16a4 <__fp_split3>
    1718:	a0 f3       	brcs	.-24     	; 0x1702 <__mulsf3+0x4>

0000171a <__mulsf3_pse>:
    171a:	95 9f       	mul	r25, r21
    171c:	d1 f3       	breq	.-12     	; 0x1712 <__mulsf3+0x14>
    171e:	95 0f       	add	r25, r21
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	55 1f       	adc	r21, r21
    1724:	62 9f       	mul	r22, r18
    1726:	f0 01       	movw	r30, r0
    1728:	72 9f       	mul	r23, r18
    172a:	bb 27       	eor	r27, r27
    172c:	f0 0d       	add	r31, r0
    172e:	b1 1d       	adc	r27, r1
    1730:	63 9f       	mul	r22, r19
    1732:	aa 27       	eor	r26, r26
    1734:	f0 0d       	add	r31, r0
    1736:	b1 1d       	adc	r27, r1
    1738:	aa 1f       	adc	r26, r26
    173a:	64 9f       	mul	r22, r20
    173c:	66 27       	eor	r22, r22
    173e:	b0 0d       	add	r27, r0
    1740:	a1 1d       	adc	r26, r1
    1742:	66 1f       	adc	r22, r22
    1744:	82 9f       	mul	r24, r18
    1746:	22 27       	eor	r18, r18
    1748:	b0 0d       	add	r27, r0
    174a:	a1 1d       	adc	r26, r1
    174c:	62 1f       	adc	r22, r18
    174e:	73 9f       	mul	r23, r19
    1750:	b0 0d       	add	r27, r0
    1752:	a1 1d       	adc	r26, r1
    1754:	62 1f       	adc	r22, r18
    1756:	83 9f       	mul	r24, r19
    1758:	a0 0d       	add	r26, r0
    175a:	61 1d       	adc	r22, r1
    175c:	22 1f       	adc	r18, r18
    175e:	74 9f       	mul	r23, r20
    1760:	33 27       	eor	r19, r19
    1762:	a0 0d       	add	r26, r0
    1764:	61 1d       	adc	r22, r1
    1766:	23 1f       	adc	r18, r19
    1768:	84 9f       	mul	r24, r20
    176a:	60 0d       	add	r22, r0
    176c:	21 1d       	adc	r18, r1
    176e:	82 2f       	mov	r24, r18
    1770:	76 2f       	mov	r23, r22
    1772:	6a 2f       	mov	r22, r26
    1774:	11 24       	eor	r1, r1
    1776:	9f 57       	subi	r25, 0x7F	; 127
    1778:	50 40       	sbci	r21, 0x00	; 0
    177a:	8a f0       	brmi	.+34     	; 0x179e <__mulsf3_pse+0x84>
    177c:	e1 f0       	breq	.+56     	; 0x17b6 <__mulsf3_pse+0x9c>
    177e:	88 23       	and	r24, r24
    1780:	4a f0       	brmi	.+18     	; 0x1794 <__mulsf3_pse+0x7a>
    1782:	ee 0f       	add	r30, r30
    1784:	ff 1f       	adc	r31, r31
    1786:	bb 1f       	adc	r27, r27
    1788:	66 1f       	adc	r22, r22
    178a:	77 1f       	adc	r23, r23
    178c:	88 1f       	adc	r24, r24
    178e:	91 50       	subi	r25, 0x01	; 1
    1790:	50 40       	sbci	r21, 0x00	; 0
    1792:	a9 f7       	brne	.-22     	; 0x177e <__mulsf3_pse+0x64>
    1794:	9e 3f       	cpi	r25, 0xFE	; 254
    1796:	51 05       	cpc	r21, r1
    1798:	70 f0       	brcs	.+28     	; 0x17b6 <__mulsf3_pse+0x9c>
    179a:	14 c0       	rjmp	.+40     	; 0x17c4 <__fp_inf>
    179c:	a6 cf       	rjmp	.-180    	; 0x16ea <__fp_szero>
    179e:	5f 3f       	cpi	r21, 0xFF	; 255
    17a0:	ec f3       	brlt	.-6      	; 0x179c <__mulsf3_pse+0x82>
    17a2:	98 3e       	cpi	r25, 0xE8	; 232
    17a4:	dc f3       	brlt	.-10     	; 0x179c <__mulsf3_pse+0x82>
    17a6:	86 95       	lsr	r24
    17a8:	77 95       	ror	r23
    17aa:	67 95       	ror	r22
    17ac:	b7 95       	ror	r27
    17ae:	f7 95       	ror	r31
    17b0:	e7 95       	ror	r30
    17b2:	9f 5f       	subi	r25, 0xFF	; 255
    17b4:	c1 f7       	brne	.-16     	; 0x17a6 <__mulsf3_pse+0x8c>
    17b6:	fe 2b       	or	r31, r30
    17b8:	88 0f       	add	r24, r24
    17ba:	91 1d       	adc	r25, r1
    17bc:	96 95       	lsr	r25
    17be:	87 95       	ror	r24
    17c0:	97 f9       	bld	r25, 7
    17c2:	08 95       	ret

000017c4 <__fp_inf>:
    17c4:	97 f9       	bld	r25, 7
    17c6:	9f 67       	ori	r25, 0x7F	; 127
    17c8:	80 e8       	ldi	r24, 0x80	; 128
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	08 95       	ret

000017d0 <__fp_nan>:
    17d0:	9f ef       	ldi	r25, 0xFF	; 255
    17d2:	80 ec       	ldi	r24, 0xC0	; 192
    17d4:	08 95       	ret

000017d6 <__fp_pscA>:
    17d6:	00 24       	eor	r0, r0
    17d8:	0a 94       	dec	r0
    17da:	16 16       	cp	r1, r22
    17dc:	17 06       	cpc	r1, r23
    17de:	18 06       	cpc	r1, r24
    17e0:	09 06       	cpc	r0, r25
    17e2:	08 95       	ret

000017e4 <__fp_pscB>:
    17e4:	00 24       	eor	r0, r0
    17e6:	0a 94       	dec	r0
    17e8:	12 16       	cp	r1, r18
    17ea:	13 06       	cpc	r1, r19
    17ec:	14 06       	cpc	r1, r20
    17ee:	05 06       	cpc	r0, r21
    17f0:	08 95       	ret

000017f2 <__fp_round>:
    17f2:	09 2e       	mov	r0, r25
    17f4:	03 94       	inc	r0
    17f6:	00 0c       	add	r0, r0
    17f8:	11 f4       	brne	.+4      	; 0x17fe <__fp_round+0xc>
    17fa:	88 23       	and	r24, r24
    17fc:	52 f0       	brmi	.+20     	; 0x1812 <__fp_round+0x20>
    17fe:	bb 0f       	add	r27, r27
    1800:	40 f4       	brcc	.+16     	; 0x1812 <__fp_round+0x20>
    1802:	bf 2b       	or	r27, r31
    1804:	11 f4       	brne	.+4      	; 0x180a <__fp_round+0x18>
    1806:	60 ff       	sbrs	r22, 0
    1808:	04 c0       	rjmp	.+8      	; 0x1812 <__fp_round+0x20>
    180a:	6f 5f       	subi	r22, 0xFF	; 255
    180c:	7f 4f       	sbci	r23, 0xFF	; 255
    180e:	8f 4f       	sbci	r24, 0xFF	; 255
    1810:	9f 4f       	sbci	r25, 0xFF	; 255
    1812:	08 95       	ret

00001814 <_exit>:
    1814:	f8 94       	cli

00001816 <__stop_program>:
    1816:	ff cf       	rjmp	.-2      	; 0x1816 <__stop_program>
